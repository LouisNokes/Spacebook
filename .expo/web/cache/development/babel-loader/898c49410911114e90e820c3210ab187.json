{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SettingScreen = function (_Component) {\n  _inherits(SettingScreen, _Component);\n\n  var _super = _createSuper(SettingScreen);\n\n  function SettingScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SettingScreen);\n\n    _this = _super.call(this, props);\n\n    _this.logout = function _callee() {\n      var navigation, token;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 3:\n              token = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem('@session_token'));\n\n            case 6:\n              return _context.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/logout', {\n                method: 'post',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  navigation.navigate('login');\n                } else if (response.status === 401) {\n                  navigation.navigate('login');\n                } else {\n                  throw new Error('Something went wrong');\n                }\n              }));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.updateUser = function _callee2() {\n      var navigation, token, userId;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _this.data = {\n                email: _this.state.email,\n                password: _this.state.password\n              };\n\n              if (_this.state.email != _this.state.profileData.email) {\n                to_send['email'] = _this.state.email;\n              }\n\n              if (_this.state.password != _this.state.profileData.password) {\n                to_send['password'] = _this.state.password;\n              }\n\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 6:\n              token = _context2.sent;\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@user_id'));\n\n            case 9:\n              userId = _context2.sent;\n              return _context2.abrupt(\"return\", fetch(\"http://localhost:3333/api/1.0.0/user/\" + userId, {\n                method: 'PATCH',\n                headers: {\n                  'X-Authorization': token,\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(_this.data)\n              }).then(function (response) {\n                if (response.status === 200) {\n                  navigation.navigate('login');\n                }\n\n                if (response.status === 400) {\n                  throw new Error('Bad Request');\n                } else if (response.status === 401) {\n                  throw new Error('Unauthorised');\n                } else {\n                  throw new Error('Something went wrong');\n                }\n              }));\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      password: '',\n      email: ''\n    };\n    return _this;\n  }\n\n  _createClass(SettingScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password;\n      return _jsxs(View, {\n        style: styles.centeredView,\n        children: [_jsx(TextInput, {\n          placeholder: \"New email\",\n          onChangeText: function onChangeText(email) {\n            return _this2.setState({\n              email: email\n            });\n          },\n          value: email,\n          style: styles.input\n        }), _jsx(TextInput, {\n          placeholder: \"New password\",\n          onChangeText: function onChangeText(password) {\n            return _this2.setState({\n              password: password\n            });\n          },\n          value: password,\n          style: styles.input\n        }), _jsx(TouchableOpacity, {\n          style: styles.settingPageBtn,\n          onPress: function onPress() {\n            _this2.updateUser();\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'white'\n            },\n            children: \"Update\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.settingPageBtn,\n          onPress: function onPress() {\n            _this2.logout();\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'red'\n            },\n            children: \"Sign out\"\n          })\n        })]\n      });\n    }\n  }]);\n\n  return SettingScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22,\n    backgroundColor: '#3b5998'\n  },\n  position: {\n    bottom: 200\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  settingPageBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#8b9dc3',\n    padding: 10,\n    margin: 5,\n    borderRadius: 10,\n    borderWidth: 2\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center'\n  },\n  input: {\n    height: 40,\n    margin: 5,\n    borderWidth: 1,\n    padding: 10,\n    backgroundColor: '#FFFFFF'\n  }\n});\nexport default SettingScreen;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/settingScreen.js"],"names":["React","Component","AsyncStorage","SettingScreen","props","logout","navigation","getItem","token","removeItem","fetch","method","headers","then","response","status","navigate","Error","updateUser","data","email","state","password","profileData","to_send","userId","body","JSON","stringify","styles","centeredView","setState","input","settingPageBtn","color","StyleSheet","create","flex","justifyContent","alignItems","marginTop","backgroundColor","position","bottom","modalView","margin","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","borderWidth","textStyle","fontWeight","textAlign","modalText","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  TouchableOpacity,\n  TextInput,\n  ToastAndroid,\n} from 'react-native';\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nclass SettingScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: '',\n      email: '',\n    };\n  }\n\n  logout = async () => {\n    const { navigation } = this.props;\n    const token = await AsyncStorage.getItem('@session_token');\n    await AsyncStorage.removeItem('@session_token');\n    return fetch('http://localhost:3333/api/1.0.0/logout', {\n      method: 'post',\n      headers: {\n        'X-Authorization': token,\n      },\n    }).then((response) => {\n      if (response.status === 200) {\n        navigation.navigate('login');\n      } else if (response.status === 401) {\n        navigation.navigate('login');\n      } else {\n        throw new Error('Something went wrong');\n      }\n    });\n  };\n\n  updateUser = async () => {\n    const { navigation } = this.props;\n    this.data = { email: this.state.email, password: this.state.password };\n\n    if (this.state.email != this.state.profileData.email) {\n      to_send['email'] = this.state.email;\n    }\n\n    if (this.state.password != this.state.profileData.password) {\n      to_send['password'] = this.state.password;\n    }\n    const token = await AsyncStorage.getItem('@session_token');\n    const userId = await AsyncStorage.getItem('@user_id');\n    return fetch(`http://localhost:3333/api/1.0.0/user/${userId}`, {\n      method: 'PATCH',\n      headers: {\n        'X-Authorization': token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.data),\n    }).then((response) => {\n      if (response.status === 200) {\n        navigation.navigate('login');\n      }\n      if (response.status === 400) {\n        throw new Error('Bad Request');\n      } else if (response.status === 401) {\n        throw new Error('Unauthorised');\n      } else {\n        throw new Error('Something went wrong');\n      }\n    });\n  };\n\n  render() {\n    const { email, password } = this.state;\n    return (\n      <View style={styles.centeredView}>\n        <TextInput\n          placeholder=\"New email\"\n          onChangeText={(email) => this.setState({ email })}\n          value={email}\n          style={styles.input}\n        />\n        <TextInput\n          placeholder=\"New password\"\n          onChangeText={(password) => this.setState({ password })}\n          value={password}\n          style={styles.input}\n        />\n        <TouchableOpacity\n          style={styles.settingPageBtn}\n          onPress={() => {\n            this.updateUser();\n          }}\n        >\n          <Text style={{ color: 'white' }}>Update</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={styles.settingPageBtn}\n          onPress={() => {\n            this.logout();\n          }}\n        >\n          <Text style={{ color: 'red' }}>Sign out</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22,\n    backgroundColor: '#3b5998',\n  },\n  position: {\n    bottom: 200,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  settingPageBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#8b9dc3',\n    padding: 10,\n    margin: 5,\n    borderRadius: 10,\n    borderWidth: 2,\n  },\n\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center',\n  },\n  input: {\n    height: 40,\n    margin: 5,\n    borderWidth: 1,\n    padding: 10,\n    backgroundColor: '#FFFFFF',\n  },\n});\n\nexport default SettingScreen;\n"]},"metadata":{},"sourceType":"module"}