{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SettingScreen = function (_Component) {\n  _inherits(SettingScreen, _Component);\n\n  var _super = _createSuper(SettingScreen);\n\n  function SettingScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SettingScreen);\n\n    _this = _super.call(this, props);\n\n    _this.logout = function _callee() {\n      var token;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 2:\n              token = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem('@session_token'));\n\n            case 5:\n              return _context.abrupt(\"return\", fetch('http://10.0.2.2:3333/api/1.0.0/logout', {\n                method: 'post',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  _this.props.navigation.navigate('login');\n                } else if (response.status === 401) {\n                  _this.props.navigation.navigate('login');\n                } else {\n                  throw 'Something went wrong';\n                }\n              }).catch(function (error) {\n                console.log(error);\n                ToastAndroid.show(error, ToastAndroid.SHORT);\n              }));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      token: '',\n      password: '',\n      email: ''\n    };\n    return _this;\n  }\n\n  _createClass(SettingScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsxs(ScrollView, {\n        children: [_jsx(TouchableOpacity, {\n          style: styles.otherBtns,\n          onPress: function onPress() {},\n          children: _jsx(Text, {\n            style: {\n              color: 'white'\n            },\n            children: \"Change email/password\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.logoutBtn,\n          onPress: function onPress() {\n            _this2.logout();\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'red'\n            },\n            children: \"Log out\"\n          })\n        })]\n      });\n    }\n  }]);\n\n  return SettingScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  logoutBtn: {\n    alignItems: 'center',\n    backgroundColor: 'grey',\n    padding: 10,\n    margin: 5,\n    borderWidth: 2\n  },\n  otherBtns: {\n    alignItems: 'center',\n    backgroundColor: 'grey',\n    padding: 10,\n    margin: 5,\n    borderWidth: 2\n  }\n});\nexport default SettingScreen;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/SettingScreen.js"],"names":["React","Component","AsyncStorage","SettingScreen","props","logout","getItem","token","removeItem","fetch","method","headers","then","response","status","navigation","navigate","catch","error","console","log","ToastAndroid","show","SHORT","state","password","email","styles","otherBtns","color","logoutBtn","StyleSheet","create","alignItems","backgroundColor","padding","margin","borderWidth"],"mappings":";;;;;;;;;;;AAGA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;AAQA,OAAOC,YAAP,MAAyB,2CAAzB;;;;IAEMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAWnBC,MAXmB,GAWV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACWH,YAAY,CAACI,OAAb,CAAqB,gBAArB,CADX;;AAAA;AACHC,cAAAA,KADG;AAAA;AAAA,+CAEDL,YAAY,CAACM,UAAb,CAAwB,gBAAxB,CAFC;;AAAA;AAAA,+CAGAC,KAAK,CAAC,uCAAD,EAA0C;AACpDC,gBAAAA,MAAM,EAAE,MAD4C;AAEpDC,gBAAAA,OAAO,EAAE;AACP,qCAAmBJ;AADZ;AAF2C,eAA1C,CAAL,CAMJK,IANI,CAMC,UAACC,QAAD,EAAc;AAClB,oBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,wBAAKV,KAAL,CAAWW,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B;AACD,iBAFD,MAEO,IAAIH,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAClC,wBAAKV,KAAL,CAAWW,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B;AACD,iBAFM,MAEA;AAEL,wBAAM,sBAAN;AACD;AACF,eAfI,EAgBJC,KAhBI,CAgBE,UAACC,KAAD,EAAW;AAChBC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,gBAAAA,YAAY,CAACC,IAAb,CAAkBJ,KAAlB,EAAyBG,YAAY,CAACE,KAAtC;AACD,eAnBI,CAHA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXU;;AAGjB,UAAKC,KAAL,GAAa;AACXjB,MAAAA,KAAK,EAAE,EADI;AAGXkB,MAAAA,QAAQ,EAAE,EAHC;AAIXC,MAAAA,KAAK,EAAE;AAJI,KAAb;AAHiB;AASlB;;;;WA2BD,kBAAS;AAAA;;AACP,aACE,MAAC,UAAD;AAAA,mBACE,KAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEC,MAAM,CAACC,SAAhC;AAA2C,UAAA,OAAO,EAAE,mBAAM,CAAE,CAA5D;AAAA,oBACE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAAb;AAAA;AAAA;AADF,UADF,EAIE,KAAC,gBAAD;AACE,UAAA,KAAK,EAAEF,MAAM,CAACG,SADhB;AAEE,UAAA,OAAO,EAAE,mBAAM;AACb,YAAA,MAAI,CAACzB,MAAL;AACD,WAJH;AAAA,oBAME,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEwB,cAAAA,KAAK,EAAE;AAAT,aAAb;AAAA;AAAA;AANF,UAJF;AAAA,QADF;AAeD;;;;EArDyB5B,S;;AAuD5B,IAAM0B,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,OAAO,EAAE,EAHA;AAITC,IAAAA,MAAM,EAAE,CAJC;AAKTC,IAAAA,WAAW,EAAE;AALJ,GADoB;AAQ/BT,EAAAA,SAAS,EAAE;AACTK,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,OAAO,EAAE,EAHA;AAITC,IAAAA,MAAM,EAAE,CAJC;AAKTC,IAAAA,WAAW,EAAE;AALJ;AARoB,CAAlB,CAAf;AAiBA,eAAelC,aAAf","sourcesContent":["/* eslint-disable react/prop-types */\r\n/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable react/no-unused-state */\r\nimport React, { Component } from 'react';\r\nimport {\r\n  Text,\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n  ScrollView,\r\n  ToastAndroid,\r\n} from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nclass SettingScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      token: '',\r\n      // Change pass & email in settings\r\n      password: '',\r\n      email: '',\r\n    };\r\n  }\r\n\r\n  logout = async () => {\r\n    let token = await AsyncStorage.getItem('@session_token');\r\n    await AsyncStorage.removeItem('@session_token');\r\n    return fetch('http://10.0.2.2:3333/api/1.0.0/logout', {\r\n      method: 'post',\r\n      headers: {\r\n        'X-Authorization': token,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          this.props.navigation.navigate('login');\r\n        } else if (response.status === 401) {\r\n          this.props.navigation.navigate('login');\r\n        } else {\r\n          // eslint-disable-next-line no-throw-literal\r\n          throw 'Something went wrong';\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        ToastAndroid.show(error, ToastAndroid.SHORT);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ScrollView>\r\n        <TouchableOpacity style={styles.otherBtns} onPress={() => {}}>\r\n          <Text style={{ color: 'white' }}>Change email/password</Text>\r\n        </TouchableOpacity>\r\n        <TouchableOpacity\r\n          style={styles.logoutBtn}\r\n          onPress={() => {\r\n            this.logout();\r\n          }}\r\n        >\r\n          <Text style={{ color: 'red' }}>Log out</Text>\r\n        </TouchableOpacity>\r\n      </ScrollView>\r\n    );\r\n  }\r\n}\r\nconst styles = StyleSheet.create({\r\n  logoutBtn: {\r\n    alignItems: 'center',\r\n    backgroundColor: 'grey',\r\n    padding: 10,\r\n    margin: 5,\r\n    borderWidth: 2,\r\n  },\r\n  otherBtns: {\r\n    alignItems: 'center',\r\n    backgroundColor: 'grey',\r\n    padding: 10,\r\n    margin: 5,\r\n    borderWidth: 2,\r\n  },\r\n});\r\n\r\nexport default SettingScreen;\r\n"]},"metadata":{},"sourceType":"module"}