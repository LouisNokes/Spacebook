{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ProfileScreen = function (_Component) {\n  _inherits(ProfileScreen, _Component);\n\n  var _super = _createSuper(ProfileScreen);\n\n  function ProfileScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ProfileScreen);\n\n    _this = _super.call(this, props);\n\n    _this.checkLoggedIn = function _callee() {\n      var navigation, value;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 3:\n              value = _context.sent;\n\n              if (value !== null) {\n                _this.setState({\n                  token: value\n                });\n              } else {\n                navigation.navigate('login');\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.get_profile_image = function () {\n      fetch('http://localhost:3333/api/1.0.0/user/10/photo', {\n        method: 'GET',\n        headers: {\n          'X-Authorization': 'a3b0601e54775e60b01664b1a5273d54'\n        }\n      }).then(function (res) {\n        return res.blob();\n      }).then(function (resBlob) {\n        var data = URL.createObjectURL(resBlob);\n\n        _this.setState({\n          photo: data,\n          isLoading: false\n        });\n      }).catch(function (err) {\n        console.log('error', err);\n      });\n    };\n\n    _this.getProfileData = function _callee2() {\n      var token, uID;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 2:\n              token = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@user_id'));\n\n            case 5:\n              uID = _context2.sent;\n              return _context2.abrupt(\"return\", fetch(\"http://localhost:3333/api/1.0.0/user/\" + uID, {\n                method: 'get',\n                headers: {\n                  'X-Authorization': token,\n                  'Content-Type': 'application/json'\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  return response.json();\n                }\n\n                if (response.status === 401) {\n                  Alert.alert('nope');\n                }\n\n                if (response.status === 404) {\n                  Alert.alert('m');\n                }\n\n                return response.blob();\n              }).catch(function (error) {\n                console.log(error);\n                ToastAndroid.show(error, ToastAndroid.SHORT);\n              }).then(function (responseJson) {\n                console.log(responseJson);\n\n                _this.setState({\n                  userId: responseJson.user_id,\n                  firstName: responseJson.first_name,\n                  lastName: responseJson.last_name,\n                  friendCount: responseJson.friend_count\n                });\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      firstName: '',\n      lastName: '',\n      friendCount: '',\n      photo: null,\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(ProfileScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getProfileData();\n      this.get_profile_image();\n    }\n  }, {\n    key: \"getUserPost\",\n    value: function getUserPost() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          friendCount = _this$state.friendCount;\n      var navigation = this.props.navigation;\n      return _jsxs(View, {\n        children: [_jsx(Image, {\n          source: {\n            uri: 'https://reactjs.org/logo-og.png'\n          },\n          style: styles.profileImg\n        }), _jsxs(Text, {\n          style: styles.txtName,\n          children: [firstName, \" \", lastName]\n        }), _jsx(TouchableOpacity, {\n          style: styles.editbtn,\n          onPress: function onPress() {\n            navigation.navigate('edit');\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'black'\n            },\n            children: \"Edit Profile\"\n          })\n        }), _jsxs(Text, {\n          style: styles.txt,\n          children: [\"Friends: \", friendCount]\n        })]\n      });\n    }\n  }]);\n\n  return ProfileScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  profileImg: {\n    width: 100,\n    height: 100,\n    borderRadius: 80,\n    borderColor: 'black',\n    borderWidth: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 20\n  },\n  txt: {\n    fontWeight: 'bold',\n    color: 'black',\n    margin: 2\n  },\n  txtName: {\n    fontWeight: 'bold',\n    color: 'black',\n    fontSize: 20\n  },\n  editbtn: {\n    alignItems: 'center',\n    backgroundColor: '#7649fe',\n    padding: 10,\n    margin: 5,\n    borderWidth: 2\n  }\n});\nexport default ProfileScreen;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/ProfileScreen.js"],"names":["AsyncStorage","React","Component","ProfileScreen","props","checkLoggedIn","navigation","getItem","value","setState","token","navigate","get_profile_image","fetch","method","headers","then","res","blob","resBlob","data","URL","createObjectURL","photo","isLoading","catch","err","console","log","getProfileData","uID","response","status","json","Alert","alert","error","ToastAndroid","show","SHORT","responseJson","userId","user_id","firstName","first_name","lastName","last_name","friendCount","friend_count","state","uri","styles","profileImg","txtName","editbtn","color","txt","StyleSheet","create","width","height","borderRadius","borderColor","borderWidth","justifyContent","alignItems","margin","fontWeight","fontSize","backgroundColor","padding"],"mappings":"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","sourcesContent":["/* eslint-disable react/sort-comp */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable react/no-unused-class-component-methods */\n/* eslint-disable react/no-unused-state */\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { Component } from 'react';\nimport {\n  Text,\n  View,\n  ToastAndroid,\n  Alert,\n  Image,\n  StyleSheet,\n  TouchableOpacity,\n} from 'react-native';\n\nclass ProfileScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstName: '',\n      lastName: '',\n      friendCount: '',\n      photo: null,\n      isLoading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.getProfileData();\n    this.get_profile_image();\n  }\n\n  checkLoggedIn = async () => {\n    const { navigation } = this.props;\n    const value = await AsyncStorage.getItem('@session_token');\n    if (value !== null) {\n      this.setState({ token: value });\n    } else {\n      navigation.navigate('login');\n    }\n  };\n\n  get_profile_image = () => {\n    fetch('http://localhost:3333/api/1.0.0/user/10/photo', {\n      method: 'GET',\n      headers: {\n        'X-Authorization': 'a3b0601e54775e60b01664b1a5273d54',\n      },\n    })\n      .then((res) => res.blob())\n      .then((resBlob) => {\n        let data = URL.createObjectURL(resBlob);\n        this.setState({\n          photo: data,\n          isLoading: false,\n        });\n      })\n      .catch((err) => {\n        console.log('error', err);\n      });\n  };\n\n  getUserPost() {} // get and display users post\n\n  // Button/Text box to add a post\n\n  getProfileData = async () => {\n    const token = await AsyncStorage.getItem('@session_token');\n    const uID = await AsyncStorage.getItem('@user_id');\n\n    return fetch(`http://localhost:3333/api/1.0.0/user/${uID}`, {\n      method: 'get',\n      headers: {\n        'X-Authorization': token,\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          return response.json();\n        }\n        if (response.status === 401) {\n          Alert.alert('nope');\n        }\n        if (response.status === 404) {\n          Alert.alert('m');\n        }\n        return response.blob();\n      })\n      .catch((error) => {\n        console.log(error);\n        ToastAndroid.show(error, ToastAndroid.SHORT);\n      })\n      .then((responseJson) => {\n        console.log(responseJson);\n        this.setState({\n          userId: responseJson.user_id,\n          firstName: responseJson.first_name,\n          lastName: responseJson.last_name,\n          friendCount: responseJson.friend_count,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  render() {\n    const { firstName, lastName, friendCount } = this.state;\n    const { navigation } = this.props;\n    return (\n      <View>\n        <Image\n          source={{ uri: 'https://reactjs.org/logo-og.png' }}\n          style={styles.profileImg}\n        />\n\n        <Text style={styles.txtName}>\n          {firstName} {lastName}\n        </Text>\n\n        <TouchableOpacity\n          style={styles.editbtn}\n          onPress={() => {\n            navigation.navigate('edit'); // Nav to edit page\n          }}\n        >\n          <Text style={{ color: 'black' }}>Edit Profile</Text>\n        </TouchableOpacity>\n        <Text style={styles.txt}>Friends: {friendCount}</Text>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  profileImg: {\n    width: 100,\n    height: 100,\n    borderRadius: 80,\n    borderColor: 'black',\n    borderWidth: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 20,\n  },\n  txt: {\n    fontWeight: 'bold',\n    color: 'black',\n    margin: 2,\n  },\n  txtName: {\n    fontWeight: 'bold',\n    color: 'black',\n    fontSize: 20,\n  },\n  editbtn: {\n    alignItems: 'center',\n    backgroundColor: '#7649fe',\n    padding: 10,\n    margin: 5,\n    borderWidth: 2,\n  },\n});\n\nexport default ProfileScreen;\n"]},"metadata":{},"sourceType":"module"}