{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { Button } from 'react-native-elements';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar FriendScreen = function (_Component) {\n  _inherits(FriendScreen, _Component);\n\n  var _super = _createSuper(FriendScreen);\n\n  function FriendScreen(props) {\n    var _this;\n\n    _classCallCheck(this, FriendScreen);\n\n    _this = _super.call(this, props);\n\n    _this.checkLoggedIn = function _callee() {\n      var navigation, value;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 3:\n              value = _context.sent;\n\n              if (value !== null) {\n                _this.setState({\n                  token: value\n                });\n              } else {\n                navigation.navigate('login');\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.get_profile_image = function () {\n      fetch('http://localhost:3333/api/1.0.0/user/${userId}/photo', {\n        method: 'GET',\n        headers: {\n          'X-Authorization': 'a3b0601e54775e60b01664b1a5273d54'\n        }\n      }).then(function (res) {\n        return res.blob();\n      }).then(function (resBlob) {\n        var data = URL.createObjectURL(resBlob);\n\n        _this.setState({\n          photo: data,\n          isLoading: false\n        });\n      }).catch(function (err) {\n        console.log('error', err);\n      });\n    };\n\n    _this.getPost = function _callee2() {\n      var navigation, token;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 3:\n              token = _context2.sent;\n              return _context2.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/user/' + _this.state.friend_id + '/post', {\n                method: 'GET',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  return response.json();\n                }\n\n                if (response.status === 400) {\n                  console.log('Bad Request');\n                } else if (response.status === 401) {\n                  navigation.navigate('login');\n                } else {\n                  throw 'Something went wrong';\n                }\n              }).then(function (responseJson) {\n                _this.setState({\n                  listData: responseJson\n                });\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.getFriendData = function _callee3() {\n      var token, uID, navigation;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 2:\n              token = _context3.sent;\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@user_id'));\n\n            case 5:\n              uID = _context3.sent;\n              navigation = _this.props.navigation;\n              return _context3.abrupt(\"return\", fetch(\"http://localhost:3333/api/1.0.0/user/\" + uID, {\n                method: 'get',\n                headers: {\n                  'X-Authorization': token,\n                  'Content-Type': 'application/json'\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  return response.json();\n                }\n\n                if (response.status === 401) {\n                  navigation.navigate('login');\n                }\n\n                if (response.status === 404) {\n                  Alert.alert('m');\n                }\n\n                return response.blob();\n              }).catch(function (error) {\n                console.log(error);\n                ToastAndroid.show(error, ToastAndroid.SHORT);\n              }).then(function (responseJson) {\n                console.log(responseJson);\n\n                _this.setState({\n                  userId: responseJson.user_id,\n                  firstName: responseJson.first_name,\n                  lastName: responseJson.last_name,\n                  friendCount: responseJson.friend_count\n                });\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      firstName: '',\n      lastName: '',\n      friendCount: '',\n      photo: null,\n      isLoading: true,\n      userId: '',\n      listData: '',\n      friend_id: _this.props.route.params.friend_id\n    };\n    return _this;\n  }\n\n  _createClass(FriendScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.unsubscribe = this.props.navigation.addListener('focus', function () {\n        _this2.getPost();\n\n        _this2.getFriendData();\n\n        _this2.get_profile_image();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          friendCount = _this$state.friendCount,\n          listData = _this$state.listData;\n      var navigation = this.props.navigation;\n      return _jsxs(ScrollView, {\n        style: styles.backgrd,\n        children: [_jsx(Image, {\n          source: {\n            uri: 'https://reactjs.org/logo-og.png'\n          },\n          style: styles.profileImg\n        }), _jsxs(Text, {\n          style: styles.txtName,\n          children: [firstName, \" \", lastName]\n        }), _jsx(TouchableOpacity, {\n          style: styles.editbtn,\n          onPress: function onPress() {\n            navigation.navigate('edit');\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'white'\n            },\n            children: \"Edit Profile\"\n          })\n        }), _jsxs(Text, {\n          style: styles.txt,\n          children: [\"Friends: \", friendCount]\n        }), _jsx(FlatList, {\n          data: listData,\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item;\n            return _jsxs(View, {\n              style: styles.postContainer,\n              children: [_jsx(Image, {\n                style: styles.profileImgCont,\n                source: require(\"../assets/nopic.png\")\n              }), _jsxs(Text, {\n                style: styles.nameTxt,\n                children: [item.author.first_name, \" \", item.author.last_name]\n              }), _jsxs(Text, {\n                style: styles.contentSection,\n                children: [\" \", item.text, \" \"]\n              }), _jsx(View, {\n                style: styles.rightButtons,\n                children: _jsx(Button, {\n                  icon: _jsx(Icon, {\n                    name: \"eye\",\n                    size: 15,\n                    color: \"white\"\n                  }),\n                  onPress: function onPress() {\n                    navigation.navigate('singlePost');\n                  }\n                })\n              })]\n            });\n          }\n        })]\n      });\n    }\n  }]);\n\n  return FriendScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  profileImg: {\n    width: 100,\n    height: 100,\n    borderRadius: 80,\n    borderColor: 'black',\n    borderWidth: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 20\n  },\n  txt: {\n    fontWeight: 'bold',\n    color: 'black',\n    margin: 2\n  },\n  txtName: {\n    fontWeight: 'bold',\n    color: 'black',\n    fontSize: 20\n  },\n  editbtn: {\n    alignItems: 'center',\n    backgroundColor: '#8b9dc3',\n    borderRadius: 10,\n    padding: 10,\n    margin: 5,\n    borderWidth: 2\n  },\n  backgrd: {\n    backgroundColor: '#3b5998'\n  },\n  buttonContainer: {\n    flexDirection: 'row'\n  },\n  postContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'white',\n    borderRadius: 10,\n    height: 300,\n    width: 400,\n    marginTop: 30,\n    borderWidth: 2\n  },\n  rightButtons: {\n    flexDirection: 'row',\n    marginLeft: 300\n  },\n  profileImgCont: {\n    resizeMode: 'contain',\n    alignSelf: 'center',\n    height: 30,\n    width: 30\n  },\n  position: {\n    bottom: 200\n  },\n  nameTxt: {\n    fontWeight: 'bold',\n    textAlign: 'center',\n    textDecorationLine: 'underline'\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    margin: 5,\n    width: 170\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  contentSection: {\n    marginTop: 10,\n    marginBottom: 15\n  }\n});\nexport default FriendScreen;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/friendScreen.js"],"names":["AsyncStorage","React","Component","Icon","Button","FriendScreen","props","checkLoggedIn","navigation","getItem","value","setState","token","navigate","get_profile_image","fetch","method","headers","then","res","blob","resBlob","data","URL","createObjectURL","photo","isLoading","catch","err","console","log","getPost","state","friend_id","response","status","json","responseJson","listData","error","getFriendData","uID","Alert","alert","ToastAndroid","show","SHORT","userId","user_id","firstName","first_name","lastName","last_name","friendCount","friend_count","route","params","unsubscribe","addListener","styles","backgrd","uri","profileImg","txtName","editbtn","color","txt","item","postContainer","profileImgCont","require","nameTxt","author","contentSection","text","rightButtons","StyleSheet","create","width","height","borderRadius","borderColor","borderWidth","justifyContent","alignItems","margin","fontWeight","fontSize","backgroundColor","padding","buttonContainer","flexDirection","flex","marginTop","marginLeft","resizeMode","alignSelf","position","bottom","textAlign","textDecorationLine","button","elevation","textStyle","marginBottom"],"mappings":"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","sourcesContent":["/* eslint-disable react/sort-comp */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable react/no-unused-class-component-methods */\r\n/* eslint-disable react/no-unused-state */\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport React, { Component } from 'react';\r\nimport {\r\n  Text,\r\n  View,\r\n  ToastAndroid,\r\n  Alert,\r\n  Image,\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n  FlatList,\r\n} from 'react-native';\r\nimport { ScrollView } from 'react-native-web';\r\nimport Icon from 'react-native-vector-icons/FontAwesome';\r\nimport { Button } from 'react-native-elements';\r\n\r\nclass FriendScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      firstName: '',\r\n      lastName: '',\r\n      friendCount: '',\r\n      photo: null,\r\n      isLoading: true,\r\n      userId: '',\r\n      listData: '',\r\n      friend_id: this.props.route.params.friend_id,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.unsubscribe = this.props.navigation.addListener('focus', () => {\r\n      this.getPost();\r\n      this.getFriendData();\r\n      this.get_profile_image();\r\n    });\r\n  }\r\n\r\n  checkLoggedIn = async () => {\r\n    const { navigation } = this.props;\r\n    const value = await AsyncStorage.getItem('@session_token');\r\n    if (value !== null) {\r\n      this.setState({ token: value });\r\n    } else {\r\n      navigation.navigate('login');\r\n    }\r\n  };\r\n\r\n  get_profile_image = () => {\r\n    fetch('http://localhost:3333/api/1.0.0/user/${userId}/photo', {\r\n      method: 'GET',\r\n      headers: {\r\n        'X-Authorization': 'a3b0601e54775e60b01664b1a5273d54',\r\n      },\r\n    })\r\n      .then((res) => res.blob())\r\n      .then((resBlob) => {\r\n        let data = URL.createObjectURL(resBlob);\r\n        this.setState({\r\n          photo: data,\r\n          isLoading: false,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log('error', err);\r\n      });\r\n  };\r\n\r\n  getPost = async () => {\r\n    const { navigation } = this.props;\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n\r\n    return fetch(\r\n      'http://localhost:3333/api/1.0.0/user/' + this.state.friend_id + '/post',\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'X-Authorization': token,\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          return response.json();\r\n        }\r\n        if (response.status === 400) {\r\n          console.log('Bad Request');\r\n        } else if (response.status === 401) {\r\n          navigation.navigate('login');\r\n        } else {\r\n          throw 'Something went wrong';\r\n        }\r\n      })\r\n      .then((responseJson) => {\r\n        this.setState({\r\n          listData: responseJson,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  getFriendData = async () => {\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n    const uID = await AsyncStorage.getItem('@user_id');\r\n    const { navigation } = this.props;\r\n    return fetch(`http://localhost:3333/api/1.0.0/user/${uID}`, {\r\n      method: 'get',\r\n      headers: {\r\n        'X-Authorization': token,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          return response.json();\r\n        }\r\n        if (response.status === 401) {\r\n          navigation.navigate('login');\r\n        }\r\n        if (response.status === 404) {\r\n          Alert.alert('m');\r\n        }\r\n        return response.blob();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        ToastAndroid.show(error, ToastAndroid.SHORT);\r\n      })\r\n      .then((responseJson) => {\r\n        console.log(responseJson);\r\n        this.setState({\r\n          userId: responseJson.user_id,\r\n          firstName: responseJson.first_name,\r\n          lastName: responseJson.last_name,\r\n          friendCount: responseJson.friend_count,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { firstName, lastName, friendCount, listData } = this.state;\r\n    const { navigation } = this.props;\r\n    return (\r\n      <ScrollView style={styles.backgrd}>\r\n        <Image\r\n          source={{ uri: 'https://reactjs.org/logo-og.png' }}\r\n          style={styles.profileImg}\r\n        />\r\n\r\n        <Text style={styles.txtName}>\r\n          {firstName} {lastName}\r\n        </Text>\r\n\r\n        <TouchableOpacity\r\n          style={styles.editbtn}\r\n          onPress={() => {\r\n            navigation.navigate('edit'); // Nav to edit page\r\n          }}\r\n        >\r\n          <Text style={{ color: 'white' }}>Edit Profile</Text>\r\n        </TouchableOpacity>\r\n        <Text style={styles.txt}>Friends: {friendCount}</Text>\r\n        <FlatList\r\n          data={listData}\r\n          renderItem={({ item }) => (\r\n            <View style={styles.postContainer}>\r\n              <Image\r\n                style={styles.profileImgCont}\r\n                source={require('../assets/nopic.png')}\r\n              />\r\n              <Text style={styles.nameTxt}>\r\n                {item.author.first_name} {item.author.last_name}\r\n              </Text>\r\n              <Text style={styles.contentSection}> {item.text} </Text>\r\n              <View style={styles.rightButtons}>\r\n                <Button\r\n                  icon={<Icon name=\"eye\" size={15} color=\"white\" />}\r\n                  onPress={() => {\r\n                    navigation.navigate('singlePost');\r\n                  }}\r\n                />\r\n              </View>\r\n            </View>\r\n          )}\r\n        />\r\n      </ScrollView>\r\n    );\r\n  }\r\n}\r\nconst styles = StyleSheet.create({\r\n  profileImg: {\r\n    width: 100,\r\n    height: 100,\r\n    borderRadius: 80,\r\n    borderColor: 'black',\r\n    borderWidth: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    margin: 20,\r\n  },\r\n  txt: {\r\n    fontWeight: 'bold',\r\n    color: 'black',\r\n    margin: 2,\r\n  },\r\n  txtName: {\r\n    fontWeight: 'bold',\r\n    color: 'black',\r\n    fontSize: 20,\r\n  },\r\n  editbtn: {\r\n    alignItems: 'center',\r\n    backgroundColor: '#8b9dc3',\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    margin: 5,\r\n    borderWidth: 2,\r\n  },\r\n  backgrd: {\r\n    backgroundColor: '#3b5998',\r\n  },\r\n  buttonContainer: {\r\n    flexDirection: 'row',\r\n  },\r\n  postContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    height: 300,\r\n    width: 400,\r\n    marginTop: 30,\r\n    borderWidth: 2,\r\n  },\r\n  rightButtons: {\r\n    flexDirection: 'row',\r\n    marginLeft: 300,\r\n  },\r\n  profileImgCont: {\r\n    resizeMode: 'contain',\r\n    alignSelf: 'center',\r\n    height: 30,\r\n    width: 30,\r\n  },\r\n  position: {\r\n    bottom: 200,\r\n  },\r\n  nameTxt: {\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    textDecorationLine: 'underline',\r\n  },\r\n  button: {\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    elevation: 2,\r\n    margin: 5,\r\n    width: 170,\r\n  },\r\n  textStyle: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  contentSection: {\r\n    marginTop: 10,\r\n    marginBottom: 15,\r\n  },\r\n});\r\n\r\nexport default FriendScreen;\r\n"]},"metadata":{},"sourceType":"module"}