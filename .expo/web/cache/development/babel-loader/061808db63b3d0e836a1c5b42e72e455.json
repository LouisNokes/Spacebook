{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport Alert from 'react-native-awesome-alerts';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Signup = function (_Component) {\n  _inherits(Signup, _Component);\n\n  var _super = _createSuper(Signup);\n\n  function Signup(props) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _super.call(this, props);\n\n    _this.showAlert = function () {\n      _this.setState({\n        showAlert: true\n      });\n    };\n\n    _this.hideAlert = function () {\n      _this.setState({\n        showAlert: false\n      });\n    };\n\n    _this.signup = function _callee() {\n      var _this$state, first_name, last_name, email, password, showAlert, navigation, userData, response;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, first_name = _this$state.first_name, last_name = _this$state.last_name, email = _this$state.email, password = _this$state.password, showAlert = _this$state.showAlert;\n              navigation = _this.props.navigation;\n              userData = {\n                first_name: first_name,\n                last_name: last_name,\n                email: email,\n                password: password\n              };\n\n              if (!(first_name === '' || last_name === '' || email === '' || password === '')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 28;\n              break;\n\n            case 6:\n              if (!(password.length < 5)) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 28;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(fetch('http://localhost:3333/api/1.0.0/user', {\n                method: 'post',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(userData)\n              }));\n\n            case 12:\n              response = _context.sent;\n\n              if (response.status === 201) {\n                navigation.navigate('login');\n                ToastAndroid.show('Account created successfully', ToastAndroid.SHORT);\n              }\n\n              if (!(response.status === 400)) {\n                _context.next = 18;\n                break;\n              }\n\n              throw new Error('Failed validation');\n\n            case 18:\n              if (!(response.status === 500)) {\n                _context.next = 22;\n                break;\n              }\n\n              throw new Error('Server error');\n\n            case 22:\n              throw 'Something went wrong';\n\n            case 23:\n              _context.next = 28;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](9);\n              console.log(_context.t0);\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[9, 25]], Promise);\n    };\n\n    _this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      showAlert: false\n    };\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          first_name = _this$state2.first_name,\n          last_name = _this$state2.last_name,\n          email = _this$state2.email,\n          password = _this$state2.password;\n      return _jsxs(ScrollView, {\n        style: styles.backgrd,\n        children: [_jsx(TextInput, {\n          placeholder: \"First Name\",\n          onChangeText: function onChangeText(first_name) {\n            return _this2.setState({\n              first_name: first_name\n            });\n          },\n          value: first_name,\n          style: styles.input\n        }), _jsx(TextInput, {\n          placeholder: \"Last Name\",\n          onChangeText: function onChangeText(last_name) {\n            return _this2.setState({\n              last_name: last_name\n            });\n          },\n          value: last_name,\n          style: styles.input\n        }), _jsx(TextInput, {\n          placeholder: \"Email\",\n          onChangeText: function onChangeText(email) {\n            return _this2.setState({\n              email: email\n            });\n          },\n          value: email,\n          style: styles.input\n        }), _jsx(TextInput, {\n          placeholder: \"Password\",\n          onChangeText: function onChangeText(password) {\n            return _this2.setState({\n              password: password\n            });\n          },\n          value: password,\n          style: styles.input\n        }), _jsx(TouchableOpacity, {\n          style: styles.signupBtn,\n          onPress: function onPress() {\n            _this2.signup();\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'white'\n            },\n            children: \"SIGN UP\"\n          })\n        })]\n      });\n    }\n  }]);\n\n  return Signup;\n}(Component);\n\nvar styles = StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n    backgroundColor: '#FFFFFF'\n  },\n  signupBtn: {\n    alignItems: 'center',\n    padding: 10,\n    backgroundColor: '#8b9dc3',\n    margin: 5,\n    borderWidth: 2\n  },\n  backgrd: {\n    backgroundColor: '#3b5998'\n  }\n});\nexport default Signup;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/signupScreen.js"],"names":["React","Component","Alert","Signup","props","showAlert","setState","hideAlert","signup","state","first_name","last_name","email","password","navigation","userData","length","fetch","method","headers","body","JSON","stringify","response","status","navigate","ToastAndroid","show","SHORT","Error","console","log","firstName","lastName","styles","backgrd","input","signupBtn","color","StyleSheet","create","height","margin","borderWidth","padding","backgroundColor","alignItems"],"mappings":"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","sourcesContent":["/* eslint-disable no-throw-literal */\nimport React, { Component } from 'react';\nimport {\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  StyleSheet,\n  TextInput,\n  ToastAndroid,\n} from 'react-native';\n\nimport Alert from 'react-native-awesome-alerts';\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      showAlert: false,\n    };\n  }\n\n  showAlert = () => {\n    this.setState({\n      showAlert: true,\n    });\n  };\n\n  hideAlert = () => {\n    this.setState({\n      showAlert: false,\n    });\n  };\n\n  signup = async () => {\n    const { first_name, last_name, email, password, showAlert } = this.state;\n    const { navigation } = this.props;\n    const userData = {\n      first_name,\n      last_name,\n      email,\n      password,\n    };\n\n    if (\n      first_name === '' ||\n      last_name === '' ||\n      email === '' ||\n      password === ''\n    ) {\n    } else if (password.length < 5) {\n    } else {\n      try {\n        const response = await fetch('http://localhost:3333/api/1.0.0/user', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(userData),\n        });\n        if (response.status === 201) {\n          navigation.navigate('login');\n          ToastAndroid.show('Account created successfully', ToastAndroid.SHORT);\n        }\n        if (response.status === 400) {\n          throw new Error('Failed validation');\n        } else if (response.status === 500) {\n          throw new Error('Server error');\n        } else {\n          throw 'Something went wrong';\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  render() {\n    const { first_name, last_name, email, password } = this.state;\n    return (\n      <ScrollView style={styles.backgrd}>\n        <TextInput\n          placeholder=\"First Name\"\n          onChangeText={(first_name) => this.setState({ first_name })}\n          value={first_name}\n          style={styles.input}\n        />\n        <TextInput\n          placeholder=\"Last Name\"\n          onChangeText={(last_name) => this.setState({ last_name })}\n          value={last_name}\n          style={styles.input}\n        />\n\n        <TextInput\n          placeholder=\"Email\"\n          onChangeText={(email) => this.setState({ email })}\n          value={email}\n          style={styles.input}\n        />\n        <TextInput\n          placeholder=\"Password\"\n          onChangeText={(password) => this.setState({ password })}\n          value={password}\n          style={styles.input}\n        />\n        <TouchableOpacity\n          style={styles.signupBtn}\n          onPress={() => {\n            this.signup();\n          }}\n        >\n          <Text style={{ color: 'white' }}>SIGN UP</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n    backgroundColor: '#FFFFFF',\n  },\n  signupBtn: {\n    alignItems: 'center',\n    padding: 10,\n    backgroundColor: '#8b9dc3',\n    margin: 5,\n    borderWidth: 2,\n  },\n  backgrd: {\n    backgroundColor: '#3b5998',\n  },\n});\n\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}