{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar FriendRequest = function (_Component) {\n  _inherits(FriendRequest, _Component);\n\n  var _super = _createSuper(FriendRequest);\n\n  function FriendRequest(props) {\n    var _this;\n\n    _classCallCheck(this, FriendRequest);\n\n    _this = _super.call(this, props);\n\n    _this.getRequest = function _callee() {\n      var navigation, token;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 3:\n              token = _context.sent;\n              return _context.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/friendrequests', {\n                method: 'GET',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  return response.json();\n                }\n\n                if (response.status === 400) {\n                  console.log('Bad Request');\n                } else if (response.status === 401) {\n                  navigation.navigate('login');\n                } else {\n                  throw 'Something went wrong';\n                }\n              }).then(function (responseJson) {\n                _this.setState({\n                  listData: responseJson\n                });\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      listData: []\n    };\n    return _this;\n  }\n\n  _createClass(FriendRequest, [{\n    key: \"render\",\n    value: function render() {\n      return _jsx(ScrollView, {\n        style: styles.backgrd,\n        children: _jsx(Text, {\n          children: \"Friend Request\"\n        })\n      });\n    }\n  }]);\n\n  return FriendRequest;\n}(Component);\n\nvar styles = StyleSheet.create({\n  backgrd: {\n    backgroundColor: '#3b5998'\n  }\n});\nexport default FriendRequest;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/friendRequestScreen.js"],"names":["React","Component","AsyncStorage","FriendRequest","props","getRequest","navigation","getItem","token","fetch","method","headers","then","response","status","json","console","log","navigate","responseJson","setState","listData","catch","error","state","styles","backgrd","StyleSheet","create","backgroundColor"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;;;IAEMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UASnBC,UATmB,GASN;AAAA;AAAA;AAAA;AAAA;AAAA;AACHC,cAAAA,UADG,GACY,MAAKF,KADjB,CACHE,UADG;AAAA;AAAA,+CAESJ,YAAY,CAACK,OAAb,CAAqB,gBAArB,CAFT;;AAAA;AAELC,cAAAA,KAFK;AAAA,+CAGJC,KAAK,CAAC,gDAAD,EAAmD;AAC7DC,gBAAAA,MAAM,EAAE,KADqD;AAE7DC,gBAAAA,OAAO,EAAE;AACP,qCAAmBH;AADZ;AAFoD,eAAnD,CAAL,CAMJI,IANI,CAMC,UAACC,QAAD,EAAc;AAClB,oBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,yBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,oBAAIF,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BE,kBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,iBAFD,MAEO,IAAIJ,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAClCR,kBAAAA,UAAU,CAACY,QAAX,CAAoB,OAApB;AACD,iBAFM,MAEA;AACL,wBAAM,sBAAN;AACD;AACF,eAjBI,EAkBJN,IAlBI,CAkBC,UAACO,YAAD,EAAkB;AACtB,sBAAKC,QAAL,CAAc;AACZC,kBAAAA,QAAQ,EAAEF;AADE,iBAAd;AAGD,eAtBI,EAuBJG,KAvBI,CAuBE,UAACC,KAAD,EAAW;AAChBP,gBAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD,eAzBI,CAHI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KATM;;AAGjB,UAAKC,KAAL,GAAa;AACXH,MAAAA,QAAQ,EAAE;AADC,KAAb;AAHiB;AAMlB;;;;WAkCD,kBAAS;AACP,aACE,KAAC,UAAD;AAAY,QAAA,KAAK,EAAEI,MAAM,CAACC,OAA1B;AAAA,kBACE,KAAC,IAAD;AAAA;AAAA;AADF,QADF;AAKD;;;;EA/CyBzB,S;;AAkD5B,IAAMwB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,OAAO,EAAE;AACPG,IAAAA,eAAe,EAAE;AADV;AADsB,CAAlB,CAAf;AAMA,eAAe1B,aAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, ScrollView, Button, StyleSheet } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nclass FriendRequest extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      listData: [],\r\n    };\r\n  }\r\n\r\n  // Button/Text box to add a post\r\n  getRequest = async () => {\r\n    const { navigation } = this.props;\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n    return fetch('http://localhost:3333/api/1.0.0/friendrequests', {\r\n      method: 'GET',\r\n      headers: {\r\n        'X-Authorization': token,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          return response.json();\r\n        }\r\n        if (response.status === 400) {\r\n          console.log('Bad Request');\r\n        } else if (response.status === 401) {\r\n          navigation.navigate('login');\r\n        } else {\r\n          throw 'Something went wrong';\r\n        }\r\n      })\r\n      .then((responseJson) => {\r\n        this.setState({\r\n          listData: responseJson,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ScrollView style={styles.backgrd}>\r\n        <Text>Friend Request</Text>\r\n      </ScrollView>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  backgrd: {\r\n    backgroundColor: '#3b5998',\r\n  },\r\n});\r\n\r\nexport default FriendRequest;\r\n"]},"metadata":{},"sourceType":"module"}