{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AddFriend = function (_Component) {\n  _inherits(AddFriend, _Component);\n\n  var _super = _createSuper(AddFriend);\n\n  function AddFriend(props) {\n    var _this;\n\n    _classCallCheck(this, AddFriend);\n\n    _this = _super.call(this, props);\n\n    _this.getData = function _callee() {\n      var searchMethod, value;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                validationText: ''\n              });\n\n              searchMethod = 'all';\n\n              if (_this.state.friendSearch) {\n                searchMethod = 'friends';\n              }\n\n              if (!(_this.state.userInput !== '')) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 6:\n              value = _context.sent;\n              return _context.abrupt(\"return\", fetch(\"http://localhost:3333/api/1.0.0/search?q=\" + _this.state.userInput + \"&search_in=\" + searchMethod, {\n                headers: {\n                  'X-Authorization': value\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  return response.json();\n                } else if (response.status === 400) {\n                  console.log('Bad Request');\n                } else if (response.status === 401) {\n                  _this.props.navigation.navigate('login');\n                } else {\n                  throw 'Something went wrong';\n                }\n              }).then(function (responseJson) {\n                _this.setState({\n                  listData: responseJson\n                });\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 10:\n              _this.setState({\n                validationText: 'You have not entered Text in the text box'\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.checkLoggedIn = function _callee2() {\n      var value;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 2:\n              value = _context2.sent;\n\n              if (value == null) {\n                _this.props.navigation.navigate('login');\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      userInput: '',\n      friendSearch: false,\n      listData: [],\n      selectedUserID: 0,\n      validationText: ''\n    };\n    return _this;\n  }\n\n  _createClass(AddFriend, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.unsubscribe = this.props.navigation.addListener('focus', function () {\n        _this2.checkLoggedIn();\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return _jsx(View, {\n        children: _jsxs(ScrollView, {\n          children: [_jsx(TextInput, {\n            placeholder: \"Search...\",\n            onChangeText: function onChangeText(userInput) {\n              return _this3.setState({\n                userInput: userInput\n              });\n            },\n            value: this.state.userInput\n          }), _jsx(Button, {\n            title: \"Search:\",\n            onPress: function onPress() {\n              return _this3.getData();\n            }\n          }), _jsx(Text, {\n            children: this.state.validationText\n          }), _jsx(FlatList, {\n            data: this.state.listData,\n            renderItem: function renderItem(_ref) {\n              var item = _ref.item;\n              return _jsx(View, {\n                children: _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return _this3.props.navigation.navigate('userScreen', {\n                      id: item.user_id\n                    });\n                  },\n                  children: _jsxs(Text, {\n                    children: [item.user_givenname, \" \", item.user_familyname]\n                  })\n                })\n              });\n            }\n          })]\n        })\n      });\n    }\n  }]);\n\n  return AddFriend;\n}(Component);\n\nexport default AddFriend;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/addFriend.js"],"names":["React","Component","AsyncStorage","AddFriend","props","getData","setState","validationText","searchMethod","state","friendSearch","userInput","getItem","value","fetch","headers","then","response","status","json","console","log","navigation","navigate","responseJson","listData","catch","error","checkLoggedIn","selectedUserID","unsubscribe","addListener","item","id","user_id","user_givenname","user_familyname"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport {\r\n  ScrollView,\r\n  Text,\r\n  Button,\r\n  TextInput,\r\n  FlatList,\r\n  View,\r\n  Switch,\r\n  TouchableOpacity,\r\n} from 'react-native-web';\r\n\r\nclass AddFriend extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInput: '',\r\n      friendSearch: false,\r\n      listData: [],\r\n      selectedUserID: 0,\r\n      validationText: '',\r\n    };\r\n  }\r\n  //Having issues with the userInput but I can't properly think why\r\n  //Look at this in depth tomorrow\r\n  componentDidMount() {\r\n    this.unsubscribe = this.props.navigation.addListener('focus', () => {\r\n      this.checkLoggedIn();\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unsubscribe();\r\n  }\r\n\r\n  getData = async () => {\r\n    //limit - lmit the number of returns\r\n    //offset - number of items to skip before new start - only really need to fliter one thing\r\n\r\n    this.setState({ validationText: '' });\r\n    let searchMethod = 'all';\r\n    if (this.state.friendSearch) {\r\n      searchMethod = 'friends';\r\n    }\r\n    if (this.state.userInput !== '') {\r\n      const value = await AsyncStorage.getItem('@session_token');\r\n      return fetch(\r\n        `http://localhost:3333/api/1.0.0/search?q=${this.state.userInput}&search_in=${searchMethod}`,\r\n        {\r\n          headers: {\r\n            'X-Authorization': value,\r\n          },\r\n        }\r\n      )\r\n        .then((response) => {\r\n          if (response.status === 200) {\r\n            return response.json();\r\n          } else if (response.status === 400) {\r\n            console.log('Bad Request');\r\n          } else if (response.status === 401) {\r\n            this.props.navigation.navigate('login');\r\n          } else {\r\n            throw 'Something went wrong';\r\n          }\r\n        })\r\n        .then((responseJson) => {\r\n          this.setState({\r\n            listData: responseJson,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      this.setState({\r\n        validationText: 'You have not entered Text in the text box',\r\n      });\r\n    }\r\n  };\r\n\r\n  checkLoggedIn = async () => {\r\n    const value = await AsyncStorage.getItem('@session_token');\r\n    if (value == null) {\r\n      this.props.navigation.navigate('login');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <View>\r\n        <ScrollView>\r\n          <TextInput\r\n            placeholder=\"Search...\"\r\n            onChangeText={(userInput) => this.setState({ userInput })}\r\n            value={this.state.userInput}\r\n          />\r\n          <Button title=\"Search:\" onPress={() => this.getData()} />\r\n          <Text>{this.state.validationText}</Text>\r\n          <FlatList\r\n            data={this.state.listData}\r\n            renderItem={({ item }) => (\r\n              <View>\r\n                <TouchableOpacity\r\n                  onPress={() =>\r\n                    this.props.navigation.navigate('userScreen', {\r\n                      id: item.user_id,\r\n                    })\r\n                  }\r\n                >\r\n                  <Text>\r\n                    {item.user_givenname} {item.user_familyname}\r\n                  </Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            )}\r\n          />\r\n        </ScrollView>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddFriend;\r\n"]},"metadata":{},"sourceType":"module"}