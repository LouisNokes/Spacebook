{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SettingScreen = function (_Component) {\n  _inherits(SettingScreen, _Component);\n\n  var _super = _createSuper(SettingScreen);\n\n  function SettingScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SettingScreen);\n\n    _this = _super.call(this, props);\n\n    _this.updateUser = function () {\n      return fetch('http://localhost:3333/list/1', {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(to_send)\n      }).then(function (response) {\n        console.log('Item updated');\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.logout = function _callee() {\n      var navigation, token;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 3:\n              token = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem('@session_token'));\n\n            case 6:\n              return _context.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/logout', {\n                method: 'post',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  navigation.navigate('login');\n                } else if (response.status === 401) {\n                  navigation.navigate('login');\n                } else {\n                  throw 'Something went wrong';\n                }\n              }).catch(function (error) {\n                console.log(error);\n                ToastAndroid.show(error, ToastAndroid.SHORT);\n              }));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      token: '',\n      password: '',\n      email: ''\n    };\n    return _this;\n  }\n\n  _createClass(SettingScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsxs(ScrollView, {\n        children: [_jsx(TouchableOpacity, {\n          style: styles.otherBtns,\n          onPress: function onPress() {\n            _this2.updateUser();\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'white'\n            },\n            children: \"Change email/password\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.logoutBtn,\n          onPress: function onPress() {\n            _this2.logout();\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'red'\n            },\n            children: \"Log out\"\n          })\n        })]\n      });\n    }\n  }]);\n\n  return SettingScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  logoutBtn: {\n    alignItems: 'center',\n    backgroundColor: 'grey',\n    padding: 10,\n    margin: 5,\n    borderWidth: 2\n  },\n  otherBtns: {\n    alignItems: 'center',\n    backgroundColor: 'grey',\n    padding: 10,\n    margin: 5,\n    borderWidth: 2\n  }\n});\nexport default SettingScreen;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/SettingScreen.js"],"names":["React","Component","AsyncStorage","SettingScreen","props","updateUser","fetch","method","headers","body","JSON","stringify","to_send","then","response","console","log","catch","error","logout","navigation","getItem","token","removeItem","status","navigate","ToastAndroid","show","SHORT","state","password","email","styles","otherBtns","color","logoutBtn","StyleSheet","create","alignItems","backgroundColor","padding","margin","borderWidth"],"mappings":"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","sourcesContent":["/* eslint-disable no-throw-literal */\n/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\nimport {\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n  ToastAndroid,\n} from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nclass SettingScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      token: '',\n      password: '',\n      email: '',\n    };\n  }\n\n  updateUser = () => {\n    return fetch('http://localhost:3333/list/1', {\n      method: 'PATCH',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(to_send),\n    })\n      .then((response) => {\n        console.log('Item updated');\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  logout = async () => {\n    const { navigation } = this.props;\n    const token = await AsyncStorage.getItem('@session_token');\n    await AsyncStorage.removeItem('@session_token');\n    return fetch('http://localhost:3333/api/1.0.0/logout', {\n      method: 'post',\n      headers: {\n        'X-Authorization': token,\n      },\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          navigation.navigate('login');\n        } else if (response.status === 401) {\n          navigation.navigate('login');\n        } else {\n          throw 'Something went wrong';\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        ToastAndroid.show(error, ToastAndroid.SHORT);\n      });\n  };\n\n  render() {\n    return (\n      <ScrollView>\n        <TouchableOpacity\n          style={styles.otherBtns}\n          onPress={() => {\n            this.updateUser();\n          }}\n        >\n          <Text style={{ color: 'white' }}>Change email/password</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={styles.logoutBtn}\n          onPress={() => {\n            this.logout();\n          }}\n        >\n          <Text style={{ color: 'red' }}>Log out</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  logoutBtn: {\n    alignItems: 'center',\n    backgroundColor: 'grey',\n    padding: 10,\n    margin: 5,\n    borderWidth: 2,\n  },\n  otherBtns: {\n    alignItems: 'center',\n    backgroundColor: 'grey',\n    padding: 10,\n    margin: 5,\n    borderWidth: 2,\n  },\n});\n\nexport default SettingScreen;\n"]},"metadata":{},"sourceType":"module"}