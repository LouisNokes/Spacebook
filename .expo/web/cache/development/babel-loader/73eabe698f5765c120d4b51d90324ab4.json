{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SettingScreen = function (_Component) {\n  _inherits(SettingScreen, _Component);\n\n  var _super = _createSuper(SettingScreen);\n\n  function SettingScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SettingScreen);\n\n    _this = _super.call(this, props);\n\n    _this.setModalVisible = function (visible) {\n      _this.setState({\n        modalVisible: visible\n      });\n    };\n\n    _this.logout = function _callee() {\n      var navigation, token;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 3:\n              token = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem('@session_token'));\n\n            case 6:\n              return _context.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/logout', {\n                method: 'post',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  navigation.navigate('login');\n                } else if (response.status === 401) {\n                  navigation.navigate('login');\n                } else {\n                  throw 'Something went wrong';\n                }\n              }).catch(function (error) {\n                console.log(error);\n                ToastAndroid.show(error, ToastAndroid.SHORT);\n              }));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      token: '',\n      password: '',\n      email: '',\n      modalVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(SettingScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var modalVisible = this.state.modalVisible;\n      return _jsxs(View, {\n        style: styles.centeredView,\n        children: [_jsx(Modal, {\n          animationType: \"slide\",\n          transparent: true,\n          visible: modalVisible,\n          onRequestClose: function onRequestClose() {\n            _this2.setModalVisible(!modalVisible);\n          },\n          children: _jsx(View, {\n            style: styles.centeredView,\n            children: _jsxs(View, {\n              style: styles.modalView,\n              children: [_jsx(TextInput, {\n                style: styles.input\n              }), _jsx(TextInput, {\n                style: styles.input\n              }), _jsx(Pressable, {\n                style: [styles.button, styles.buttonClose],\n                onPress: function onPress() {\n                  return _this2.updateUser();\n                },\n                children: _jsx(Text, {\n                  style: styles.textStyle,\n                  children: \"Save\"\n                })\n              }), _jsx(Pressable, {\n                style: [styles.button, styles.buttonClose],\n                onPress: function onPress() {\n                  return _this2.setModalVisible(!modalVisible);\n                },\n                children: _jsx(Text, {\n                  style: styles.textStyle,\n                  children: \"Close\"\n                })\n              })]\n            })\n          })\n        }), _jsx(Pressable, {\n          style: [styles.button, styles.buttonOpen, styles.position],\n          onPress: function onPress() {\n            return _this2.setModalVisible(true);\n          },\n          children: _jsx(Text, {\n            style: styles.textStyle,\n            children: \"Change email/password\"\n          })\n        })]\n      });\n    }\n  }]);\n\n  return SettingScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22\n  },\n  position: {\n    bottom: 0\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    margin: 5,\n    width: 170\n  },\n  buttonOpen: {\n    backgroundColor: '#660094'\n  },\n  buttonClose: {\n    backgroundColor: '#660094'\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center'\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  }\n});\nexport default SettingScreen;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/SettingScreen.js"],"names":["React","Component","AsyncStorage","SettingScreen","props","setModalVisible","visible","setState","modalVisible","logout","navigation","getItem","token","removeItem","fetch","method","headers","then","response","status","navigate","catch","error","console","log","ToastAndroid","show","SHORT","state","password","email","styles","centeredView","modalView","input","button","buttonClose","updateUser","textStyle","buttonOpen","position","StyleSheet","create","flex","justifyContent","alignItems","marginTop","bottom","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","color","fontWeight","textAlign","modalText","marginBottom","borderWidth"],"mappings":"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","sourcesContent":["/* eslint-disable no-throw-literal */\n/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  Pressable,\n  Modal,\n  TextInput,\n  ToastAndroid,\n} from 'react-native';\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nclass SettingScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      token: '',\n      password: '',\n      email: '',\n      modalVisible: false,\n    };\n  }\n\n  setModalVisible = (visible) => {\n    this.setState({ modalVisible: visible });\n  };\n\n  logout = async () => {\n    const { navigation } = this.props;\n    const token = await AsyncStorage.getItem('@session_token');\n    await AsyncStorage.removeItem('@session_token');\n    return fetch('http://localhost:3333/api/1.0.0/logout', {\n      method: 'post',\n      headers: {\n        'X-Authorization': token,\n      },\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          navigation.navigate('login');\n        } else if (response.status === 401) {\n          navigation.navigate('login');\n        } else {\n          throw 'Something went wrong';\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        ToastAndroid.show(error, ToastAndroid.SHORT);\n      });\n  };\n\n  render() {\n    const { modalVisible } = this.state;\n    return (\n      <View style={styles.centeredView}>\n        <Modal\n          animationType=\"slide\"\n          transparent={true}\n          visible={modalVisible}\n          onRequestClose={() => {\n            this.setModalVisible(!modalVisible);\n          }}\n        >\n          <View style={styles.centeredView}>\n            <View style={styles.modalView}>\n              <TextInput style={styles.input} />\n              <TextInput style={styles.input} />\n              <Pressable\n                style={[styles.button, styles.buttonClose]}\n                onPress={() => this.updateUser()}\n              >\n                <Text style={styles.textStyle}>Save</Text>\n              </Pressable>\n              <Pressable\n                style={[styles.button, styles.buttonClose]}\n                onPress={() => this.setModalVisible(!modalVisible)}\n              >\n                <Text style={styles.textStyle}>Close</Text>\n              </Pressable>\n            </View>\n          </View>\n        </Modal>\n        <Pressable\n          style={[styles.button, styles.buttonOpen, styles.position]}\n          onPress={() => this.setModalVisible(true)}\n        >\n          <Text style={styles.textStyle}>Change email/password</Text>\n        </Pressable>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22,\n  },\n  position: {\n    bottom: 0,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    margin: 5,\n    width: 170,\n  },\n  buttonOpen: {\n    backgroundColor: '#660094',\n  },\n  buttonClose: {\n    backgroundColor: '#660094',\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center',\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n  },\n});\n\nexport default SettingScreen;\n"]},"metadata":{},"sourceType":"module"}