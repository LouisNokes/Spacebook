{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ViewPost = function (_Component) {\n  _inherits(ViewPost, _Component);\n\n  var _super = _createSuper(ViewPost);\n\n  function ViewPost(props) {\n    var _this;\n\n    _classCallCheck(this, ViewPost);\n\n    _this = _super.call(this, props);\n\n    _this.checkLoggedIn = function _callee() {\n      var value;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 2:\n              value = _context.sent;\n\n              if (value == null) {\n                _this.props.navigation.navigate('login');\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.updatePost = function _callee2() {\n      var to_send, token;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                validationText: ''\n              });\n\n              if (!(_this.state.postText != '')) {\n                _context2.next = 11;\n                break;\n              }\n\n              if (!(_this.state.postText != _this.state.postData.text)) {\n                _context2.next = 9;\n                break;\n              }\n\n              to_send = {};\n              to_send['text'] = _this.state.postText;\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 7:\n              token = _context2.sent;\n              return _context2.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/user/' + _this.state.userID + '/post/' + _this.state.postID, {\n                method: 'PATCH',\n                headers: {\n                  'X-Authorization': token,\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(to_send)\n              }).then(function (response) {\n                if (response.status === 200) {\n                  console.log('Good response');\n                } else if (response.status === 400) {\n                  console.log('Bad Request');\n                } else if (response.status === 401) {\n                  _this.props.navigation.navigate('Login');\n                } else if (response.status === 403) {\n                  console.log('Cannot update other peoples posts');\n                } else if (response.status === 404) {\n                  console.log('Not found');\n                } else {\n                  throw 'Server Error ';\n                }\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 9:\n              _context2.next = 12;\n              break;\n\n            case 11:\n              _this.setState({\n                validationText: 'You are trying to update the post with no data'\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.deletePost = function _callee3() {\n      var token;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 2:\n              token = _context3.sent;\n              return _context3.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/user/' + _this.state.userID + '/post/' + _this.state.postID, {\n                method: 'Delete',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  console.log('Response is good');\n\n                  _this.props.navigation.navigate('profileScreen');\n                } else if (response.status === 401) {\n                  _this.props.navigation.navigate('login');\n                } else if (response.status === 403) {\n                  console.log('You can only delete your own posts');\n                } else if (response.status === 404) {\n                  console.log('Not found');\n                } else {\n                  throw 'Something not working';\n                }\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.checkLiked = function _callee4() {\n      var id, token;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('user_id'));\n\n            case 2:\n              id = _context4.sent;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 5:\n              token = _context4.sent;\n\n              if (!(id != _this.state.userID)) {\n                _context4.next = 10;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/user/' + _this.state.userID + '/post/' + _this.state.postID + '/like', {\n                method: 'POST',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  return fetch('http://localhost:3333/api/1.0.0/user/' + _this.state.userID + '/post/' + _this.state.postID + '/like', {\n                    method: 'DELETE',\n                    headers: {\n                      'X-Authorization': token\n                    }\n                  });\n                } else if (response.status === 400 || response.status === 403) {\n                  _this.setState({\n                    likeTitle: 'thumbs-down'\n                  });\n                }\n              }));\n\n            case 10:\n              _this.setState({\n                ownProfile: true\n              });\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.likePost = function _callee5() {\n      var likeRequest, token;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (_this.state.likeTitle == 'thumbs-up') {\n                likeRequest = 'POST';\n\n                _this.setState({\n                  likeTitle: 'thumbs-down'\n                });\n              } else {\n                likeRequest = 'DELETE';\n\n                _this.setState({\n                  likeTitle: 'thumbs-up'\n                });\n              }\n\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 3:\n              token = _context5.sent;\n              return _context5.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/user/' + _this.state.userID + '/post/' + _this.state.postID + '/like', {\n                method: likeRequest,\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  _this.getPostData();\n\n                  console.log('response is 2000 - good');\n                } else if (response.status === 401) {\n                  _this.props.navigation.navigate('login');\n                } else if (response.status === 403) {\n                  console.log('Forbidden ');\n                } else {\n                  throw 'Somehting';\n                }\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.getPostData = function _callee6() {\n      var id, token;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('user_id'));\n\n            case 2:\n              id = _context6.sent;\n              _context6.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 5:\n              token = _context6.sent;\n              return _context6.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/user/' + _this.state.userID + '/post/' + _this.state.postID, {\n                method: 'get',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  return response.json();\n                } else if (response.status === 401) {\n                  _this.props.navigation.navigate('login');\n                } else if (response.status === 403) {\n                  console.log('Can only view the posts of yourself or friends');\n                } else if (response.status === 404) {\n                  console.log('Not Found');\n                } else {\n                  throw 'Something not working';\n                }\n              }).then(function (responseJson) {\n                if (id == responseJson.author.user_id) {\n                  _this.setState({\n                    postData: responseJson,\n                    userVerifed: true,\n                    authorName: responseJson.author.first_name\n                  });\n                } else {\n                  _this.setState({\n                    postData: responseJson,\n                    userVerifed: false,\n                    authorName: responseJson.author.first_name\n                  });\n                }\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      userID: _this.props.route.params.userInfo,\n      postID: _this.props.route.params.item,\n      userName: _this.props.route.params.userName,\n      postData: [],\n      postText: '',\n      authorName: '',\n      editPost: false,\n      userVerifed: false,\n      updating: false,\n      likeTitle: 'thumbs-up',\n      validationText: '',\n      ownProfile: false\n    };\n    return _this;\n  }\n\n  _createClass(ViewPost, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.unsubscribe = this.props.navigation.addListener('focus', function () {\n        _this2.checkLoggedIn();\n\n        _this2.getPostData();\n      });\n\n      if (!this.state.userVerifed) {\n        this.checkLiked();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.userVerifed) {\n        if (!this.state.editPost) {\n          return _jsxs(View, {\n            children: [_jsxs(View, {\n              children: [_jsxs(Text, {\n                style: styles.label,\n                children: [\"Posted to \", this.state.userName, \"'s wall\"]\n              }), _jsxs(Text, {\n                style: styles.label,\n                children: [\"By \", this.state.authorName]\n              })]\n            }), _jsx(TextInput, {\n              style: styles.postStyle,\n              multiline: true,\n              editable: this.state.editPost,\n              numberOfLines: 4,\n              onChangeText: function onChangeText(value) {\n                return _this3.setState({\n                  postText: value\n                });\n              },\n              defaultValue: this.state.postData.text\n            }), _jsxs(Text, {\n              style: styles.label,\n              children: [\"Likes: \", this.state.postData.numLikes]\n            }), _jsx(Button, {\n              title: \"Update\",\n              onPress: function onPress(value) {\n                return _this3.setState({\n                  editPost: value\n                });\n              },\n              value: this.state.editPost\n            }), _jsx(Button, {\n              title: \"Delete\",\n              onPress: function onPress() {\n                return _this3.deletePost();\n              }\n            })]\n          });\n        } else {\n          return _jsxs(View, {\n            children: [_jsxs(View, {\n              children: [_jsxs(Text, {\n                style: styles.label,\n                children: [\"Posted to \", this.state.userName, \"'s wall\"]\n              }), _jsxs(Text, {\n                style: styles.label,\n                children: [\"By \", this.state.authorName]\n              })]\n            }), _jsx(TextInput, {\n              style: styles.postStyle,\n              multiline: true,\n              editable: this.state.editPost,\n              numberOfLines: 4,\n              onChangeText: function onChangeText(value) {\n                return _this3.setState({\n                  postText: value\n                });\n              },\n              defaultValue: this.state.postData.text\n            }), _jsx(Text, {\n              children: this.state.validationText\n            }), _jsxs(Text, {\n              style: styles.label,\n              children: [\"Likes: \", this.state.postData.numLikes]\n            }), _jsx(Button, {\n              title: \"Save\",\n              onPress: function onPress() {\n                return _this3.updatePost();\n              }\n            }), _jsx(Button, {\n              title: \"Back\",\n              onPress: function onPress(value) {\n                return _this3.setState({\n                  editPost: false\n                }, function () {\n                  return _this3.getPostData();\n                });\n              },\n              Yea: true,\n              value: this.state.editPost\n            })]\n          });\n        }\n      } else {\n        if (!this.state.ownProfile) {\n          return _jsxs(View, {\n            children: [_jsxs(View, {\n              children: [_jsxs(Text, {\n                style: styles.label,\n                children: [\"Posted to \", this.state.userName, \"'s wall\"]\n              }), _jsxs(Text, {\n                style: styles.label,\n                children: [\"By \", this.state.authorName]\n              })]\n            }), _jsx(TextInput, {\n              style: styles.postStyle,\n              multiline: true,\n              editable: false,\n              numberOfLines: 4,\n              defaultValue: this.state.postData.text\n            }), _jsxs(Text, {\n              style: styles.label,\n              children: [\"Likes: \", this.state.postData.numLikes]\n            }), _jsx(FontAwesome5, {\n              name: this.state.likeTitle,\n              onPress: function onPress() {\n                return _this3.likePost();\n              },\n              size: 30\n            })]\n          });\n        } else {\n          return _jsxs(View, {\n            children: [_jsxs(View, {\n              children: [_jsxs(Text, {\n                style: styles.label,\n                children: [\"Posted to \", this.state.userName, \"'s wall\"]\n              }), _jsxs(Text, {\n                style: styles.label,\n                children: [\"By \", this.state.authorName]\n              })]\n            }), _jsx(TextInput, {\n              style: styles.postStyle,\n              multiline: true,\n              editable: false,\n              numberOfLines: 4,\n              defaultValue: this.state.postData.text\n            }), _jsxs(Text, {\n              style: styles.label,\n              children: [\"Likes: \", this.state.postData.numLikes]\n            })]\n          });\n        }\n      }\n    }\n  }]);\n\n  return ViewPost;\n}(Component);\n\nvar styles = StyleSheet.create({\n  label: {\n    fontSize: 15,\n    color: 'steelblue'\n  },\n  postStyle: {\n    borderWidth: 1,\n    borderColor: 'lightblue',\n    borderRadius: 5\n  }\n});\nexport default ViewPost;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/viewSinglePost.js"],"names":["AsyncStorage","React","Component","ViewPost","props","checkLoggedIn","getItem","value","navigation","navigate","updatePost","setState","validationText","state","postText","postData","text","to_send","token","fetch","userID","postID","method","headers","body","JSON","stringify","then","response","status","console","log","catch","error","deletePost","checkLiked","id","likeTitle","ownProfile","likePost","likeRequest","getPostData","json","responseJson","author","user_id","userVerifed","authorName","first_name","route","params","userInfo","item","userName","editPost","updating","unsubscribe","addListener","styles","label","postStyle","numLikes","StyleSheet","create","fontSize","color","borderWidth","borderColor","borderRadius"],"mappings":"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","sourcesContent":["/* eslint-disable react/sort-comp */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable react/no-unused-class-component-methods */\r\n/* eslint-disable react/no-unused-state */\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport React, { Component } from 'react';\r\nimport { Text, View, Image, StyleSheet, FlatList } from 'react-native';\r\nimport { ScrollView } from 'react-native-web';\r\n\r\nclass ViewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userID: this.props.route.params.userInfo,\r\n      postID: this.props.route.params.item,\r\n      userName: this.props.route.params.userName,\r\n      postData: [],\r\n      postText: '',\r\n      authorName: '',\r\n      editPost: false,\r\n      userVerifed: false,\r\n      updating: false,\r\n      likeTitle: 'thumbs-up',\r\n      validationText: '',\r\n      ownProfile: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.unsubscribe = this.props.navigation.addListener('focus', () => {\r\n      this.checkLoggedIn();\r\n      this.getPostData();\r\n    });\r\n    if (!this.state.userVerifed) {\r\n      this.checkLiked();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unsubscribe();\r\n  }\r\n\r\n  checkLoggedIn = async () => {\r\n    const value = await AsyncStorage.getItem('@session_token');\r\n    if (value == null) {\r\n      this.props.navigation.navigate('login');\r\n    }\r\n  };\r\n\r\n  updatePost = async () => {\r\n    this.setState({ validationText: '' });\r\n    if (this.state.postText != '') {\r\n      if (this.state.postText != this.state.postData.text) {\r\n        let to_send = {};\r\n        to_send['text'] = this.state.postText;\r\n        const token = await AsyncStorage.getItem('@session_token');\r\n\r\n        return fetch(\r\n          'http://localhost:3333/api/1.0.0/user/' +\r\n            this.state.userID +\r\n            '/post/' +\r\n            this.state.postID,\r\n          {\r\n            method: 'PATCH',\r\n            headers: {\r\n              'X-Authorization': token,\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(to_send),\r\n          }\r\n        )\r\n          .then((response) => {\r\n            if (response.status === 200) {\r\n              console.log('Good response');\r\n            } else if (response.status === 400) {\r\n              console.log('Bad Request');\r\n            } else if (response.status === 401) {\r\n              this.props.navigation.navigate('Login');\r\n            } else if (response.status === 403) {\r\n              console.log('Cannot update other peoples posts');\r\n            } else if (response.status === 404) {\r\n              console.log('Not found');\r\n            } else {\r\n              throw 'Server Error ';\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        validationText: 'You are trying to update the post with no data',\r\n      });\r\n    }\r\n  };\r\n\r\n  deletePost = async () => {\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n    return fetch(\r\n      'http://localhost:3333/api/1.0.0/user/' +\r\n        this.state.userID +\r\n        '/post/' +\r\n        this.state.postID,\r\n      {\r\n        method: 'Delete',\r\n        headers: {\r\n          'X-Authorization': token,\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          console.log('Response is good');\r\n          this.props.navigation.navigate('profileScreen');\r\n        } else if (response.status === 401) {\r\n          this.props.navigation.navigate('login');\r\n        } else if (response.status === 403) {\r\n          console.log('You can only delete your own posts');\r\n        } else if (response.status === 404) {\r\n          console.log('Not found');\r\n        } else {\r\n          throw 'Something not working';\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  checkLiked = async () => {\r\n    //Checks if liked to change the button icon\r\n    const id = await AsyncStorage.getItem('user_id');\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n    if (id != this.state.userID) {\r\n      return fetch(\r\n        'http://localhost:3333/api/1.0.0/user/' +\r\n          this.state.userID +\r\n          '/post/' +\r\n          this.state.postID +\r\n          '/like',\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'X-Authorization': token,\r\n          },\r\n        }\r\n      ).then((response) => {\r\n        if (response.status === 200) {\r\n          return fetch(\r\n            'http://localhost:3333/api/1.0.0/user/' +\r\n              this.state.userID +\r\n              '/post/' +\r\n              this.state.postID +\r\n              '/like',\r\n            {\r\n              method: 'DELETE',\r\n              headers: {\r\n                'X-Authorization': token,\r\n              },\r\n            }\r\n          );\r\n        } else if (response.status === 400 || response.status === 403) {\r\n          this.setState({\r\n            likeTitle: 'thumbs-down',\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.setState({ ownProfile: true });\r\n    }\r\n  };\r\n\r\n  likePost = async () => {\r\n    let likeRequest;\r\n    if (this.state.likeTitle == 'thumbs-up') {\r\n      likeRequest = 'POST';\r\n      this.setState({\r\n        likeTitle: 'thumbs-down',\r\n      });\r\n    } else {\r\n      likeRequest = 'DELETE';\r\n      this.setState({\r\n        likeTitle: 'thumbs-up',\r\n      });\r\n    }\r\n\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n    return fetch(\r\n      'http://localhost:3333/api/1.0.0/user/' +\r\n        this.state.userID +\r\n        '/post/' +\r\n        this.state.postID +\r\n        '/like',\r\n      {\r\n        method: likeRequest,\r\n        headers: {\r\n          'X-Authorization': token,\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          this.getPostData();\r\n          console.log('response is 2000 - good');\r\n        } else if (response.status === 401) {\r\n          this.props.navigation.navigate('login');\r\n        } else if (response.status === 403) {\r\n          console.log('Forbidden ');\r\n        } else {\r\n          throw 'Somehting';\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  getPostData = async () => {\r\n    const id = await AsyncStorage.getItem('user_id');\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n    return fetch(\r\n      'http://localhost:3333/api/1.0.0/user/' +\r\n        this.state.userID +\r\n        '/post/' +\r\n        this.state.postID,\r\n      {\r\n        method: 'get',\r\n        headers: {\r\n          'X-Authorization': token,\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          return response.json();\r\n        } else if (response.status === 401) {\r\n          this.props.navigation.navigate('login');\r\n        } else if (response.status === 403) {\r\n          console.log('Can only view the posts of yourself or friends');\r\n        } else if (response.status === 404) {\r\n          console.log('Not Found');\r\n        } else {\r\n          throw 'Something not working';\r\n        }\r\n      })\r\n      .then((responseJson) => {\r\n        if (id == responseJson.author.user_id) {\r\n          this.setState({\r\n            postData: responseJson,\r\n            userVerifed: true,\r\n            authorName: responseJson.author.first_name,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            postData: responseJson,\r\n            userVerifed: false,\r\n            authorName: responseJson.author.first_name,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.userVerifed) {\r\n      if (!this.state.editPost) {\r\n        return (\r\n          <View>\r\n            <View>\r\n              <Text style={styles.label}>\r\n                Posted to {this.state.userName}'s wall\r\n              </Text>\r\n              <Text style={styles.label}>By {this.state.authorName}</Text>\r\n            </View>\r\n\r\n            <TextInput\r\n              style={styles.postStyle}\r\n              multiline\r\n              editable={this.state.editPost}\r\n              numberOfLines={4}\r\n              onChangeText={(value) => this.setState({ postText: value })}\r\n              defaultValue={this.state.postData.text}\r\n            />\r\n            <Text style={styles.label}>\r\n              Likes: {this.state.postData.numLikes}\r\n            </Text>\r\n            <Button\r\n              title=\"Update\"\r\n              onPress={(value) => this.setState({ editPost: value })}\r\n              value={this.state.editPost}\r\n            />\r\n            <Button title=\"Delete\" onPress={() => this.deletePost()} />\r\n          </View>\r\n        );\r\n      } else {\r\n        return (\r\n          <View>\r\n            <View>\r\n              <Text style={styles.label}>\r\n                Posted to {this.state.userName}'s wall\r\n              </Text>\r\n              <Text style={styles.label}>By {this.state.authorName}</Text>\r\n            </View>\r\n            <TextInput\r\n              style={styles.postStyle}\r\n              multiline\r\n              editable={this.state.editPost}\r\n              numberOfLines={4}\r\n              onChangeText={(value) => this.setState({ postText: value })}\r\n              defaultValue={this.state.postData.text}\r\n            />\r\n            <Text>{this.state.validationText}</Text>\r\n            <Text style={styles.label}>\r\n              Likes: {this.state.postData.numLikes}\r\n            </Text>\r\n            <Button title=\"Save\" onPress={() => this.updatePost()} />\r\n            <Button\r\n              title=\"Back\"\r\n              onPress={(value) =>\r\n                this.setState({ editPost: false }, () => this.getPostData())\r\n              }\r\n              Yea\r\n              value={this.state.editPost}\r\n            />\r\n          </View>\r\n        );\r\n      }\r\n    } else {\r\n      if (!this.state.ownProfile) {\r\n        return (\r\n          <View>\r\n            <View>\r\n              <Text style={styles.label}>\r\n                Posted to {this.state.userName}'s wall\r\n              </Text>\r\n              <Text style={styles.label}>By {this.state.authorName}</Text>\r\n            </View>\r\n            <TextInput\r\n              style={styles.postStyle}\r\n              multiline\r\n              editable={false}\r\n              numberOfLines={4}\r\n              defaultValue={this.state.postData.text}\r\n            />\r\n            <Text style={styles.label}>\r\n              Likes: {this.state.postData.numLikes}\r\n            </Text>\r\n            <FontAwesome5\r\n              name={this.state.likeTitle}\r\n              onPress={() => this.likePost()}\r\n              size={30}\r\n            />\r\n          </View>\r\n        );\r\n      } else {\r\n        return (\r\n          <View>\r\n            <View>\r\n              <Text style={styles.label}>\r\n                Posted to {this.state.userName}'s wall\r\n              </Text>\r\n              <Text style={styles.label}>By {this.state.authorName}</Text>\r\n            </View>\r\n            <TextInput\r\n              style={styles.postStyle}\r\n              multiline\r\n              editable={false}\r\n              numberOfLines={4}\r\n              defaultValue={this.state.postData.text}\r\n            />\r\n            <Text style={styles.label}>\r\n              Likes: {this.state.postData.numLikes}\r\n            </Text>\r\n          </View>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  label: {\r\n    fontSize: 15,\r\n    color: 'steelblue',\r\n  },\r\n  postStyle: {\r\n    borderWidth: 1,\r\n    borderColor: 'lightblue',\r\n    borderRadius: 5,\r\n  },\r\n});\r\n\r\nexport default ViewPost;\r\n"]},"metadata":{},"sourceType":"module"}