{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ViewPost = function (_Component) {\n  _inherits(ViewPost, _Component);\n\n  var _super = _createSuper(ViewPost);\n\n  function ViewPost(props) {\n    var _this;\n\n    _classCallCheck(this, ViewPost);\n\n    _this = _super.call(this, props);\n\n    _this.getPost = function _callee() {\n      var token, user_id, post_id;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 2:\n              token = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@user_id'));\n\n            case 5:\n              user_id = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@post_id'));\n\n            case 8:\n              post_id = _context.sent;\n              return _context.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/user/' + user_id + '/post/' + post_id, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  return response.json();\n                } else if (response.status === 401) {\n                  throw 'Unauthorised';\n                } else {\n                  throw 'Error Occured';\n                }\n              }).then(function (responseJson) {\n                _this.setState({\n                  postData: responseJson\n                });\n\n                _this.getPhoto(_this.state.postData.author.user_id);\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.getPhoto = function _callee2(photo_id) {\n      var token;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 2:\n              token = _context2.sent;\n              return _context2.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/user/' + photo_id + '/photo', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'X-Authorization': token\n                }\n              }).then(function (res) {\n                return res.blob();\n              }).then(function (resBlob) {\n                var data = URL.createObjectURL(resBlob);\n                _this.state.postData.user_photo = data;\n\n                _this.setState({\n                  isLoading: false\n                });\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      isLoading: true,\n      postData: []\n    };\n    return _this;\n  }\n\n  _createClass(ViewPost, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.unsubscribe = this.props.navigation.addListener('focus', function () {\n        _this2.getPost();\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.isLoading) {\n        return _jsx(View, {\n          children: _jsx(Text, {\n            children: \"Loading..\"\n          })\n        });\n      } else {\n        return _jsx(View, {\n          style: styles.Container,\n          children: _jsx(View, {\n            style: styles.postView,\n            children: _jsxs(View, {\n              style: {\n                flexDirection: 'row'\n              },\n              children: [_jsx(Image, {\n                source: {\n                  uri: this.state.postData.user_photo\n                },\n                style: {\n                  width: 50,\n                  height: 50\n                }\n              }), _jsxs(View, {\n                style: {\n                  flex: 1,\n                  paddingLeft: '1%'\n                },\n                children: [_jsxs(Text, {\n                  style: {\n                    fontSize: '14px',\n                    fontWeight: 'bold'\n                  },\n                  children: [this.state.postData.author.first_name, ' ', this.state.postData.author.last_name]\n                }), _jsx(Text, {\n                  children: this.state.postData.text\n                }), _jsxs(Text, {\n                  children: [\"Likes: \", this.state.postData.numLikes]\n                }), _jsx(Text, {\n                  children: new Date(this.state.postData.timestamp).toUTCString()\n                })]\n              })]\n            })\n          })\n        });\n      }\n    }\n  }]);\n\n  return ViewPost;\n}(Component);\n\nexport default ViewPost;\nvar styles = StyleSheet.create({\n  Container: {\n    position: 'relative',\n    margin: '3%',\n    flex: '1'\n  },\n  TextInput: {\n    fontSize: '14px',\n    height: '10%',\n    borderWidth: '2px',\n    borderColor: '#000000'\n  },\n  postView: {\n    backgroundColor: '#d3d3d3'\n  }\n});","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/viewSinglePost.js"],"names":["AsyncStorage","React","Component","ViewPost","props","getPost","getItem","token","user_id","post_id","fetch","method","headers","then","response","status","json","responseJson","setState","postData","getPhoto","state","author","catch","error","console","log","photo_id","res","blob","resBlob","data","URL","createObjectURL","user_photo","isLoading","unsubscribe","navigation","addListener","styles","Container","postView","flexDirection","uri","width","height","flex","paddingLeft","fontSize","fontWeight","first_name","last_name","text","numLikes","Date","timestamp","toUTCString","StyleSheet","create","position","margin","TextInput","borderWidth","borderColor","backgroundColor"],"mappings":"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","sourcesContent":["/* eslint-disable react/sort-comp */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable react/no-unused-class-component-methods */\r\n/* eslint-disable react/no-unused-state */\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport React, { Component } from 'react';\r\nimport { Text, View, Image, StyleSheet, FlatList } from 'react-native';\r\nimport { ScrollView } from 'react-native-web';\r\n\r\nclass ViewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: true,\r\n      postData: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.unsubscribe = this.props.navigation.addListener('focus', () => {\r\n      this.getPost();\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unsubscribe();\r\n  }\r\n\r\n  getPost = async () => {\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n    const user_id = await AsyncStorage.getItem('@user_id');\r\n    const post_id = await AsyncStorage.getItem('@post_id');\r\n    return fetch(\r\n      'http://localhost:3333/api/1.0.0/user/' + user_id + '/post/' + post_id,\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Authorization': token,\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          return response.json();\r\n        } else if (response.status === 401) {\r\n          throw 'Unauthorised';\r\n        } else {\r\n          throw 'Error Occured';\r\n        }\r\n      })\r\n      .then((responseJson) => {\r\n        this.setState({\r\n          postData: responseJson,\r\n        });\r\n        this.getPhoto(this.state.postData.author.user_id);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  getPhoto = async (photo_id) => {\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n    return fetch(\r\n      'http://localhost:3333/api/1.0.0/user/' + photo_id + '/photo',\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Authorization': token,\r\n        },\r\n      }\r\n    )\r\n      .then((res) => {\r\n        return res.blob();\r\n      })\r\n      .then((resBlob) => {\r\n        let data = URL.createObjectURL(resBlob);\r\n        this.state.postData.user_photo = data;\r\n        this.setState({\r\n          isLoading: false,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <View>\r\n          <Text>Loading..</Text>\r\n        </View>\r\n      );\r\n    } else {\r\n      return (\r\n        <View style={styles.Container}>\r\n          <View style={styles.postView}>\r\n            <View style={{ flexDirection: 'row' }}>\r\n              <Image\r\n                source={{\r\n                  uri: this.state.postData.user_photo,\r\n                }}\r\n                style={{\r\n                  width: 50,\r\n                  height: 50,\r\n                }}\r\n              />\r\n              <View style={{ flex: 1, paddingLeft: '1%' }}>\r\n                <Text style={{ fontSize: '14px', fontWeight: 'bold' }}>\r\n                  {this.state.postData.author.first_name}{' '}\r\n                  {this.state.postData.author.last_name}\r\n                </Text>\r\n                <Text>{this.state.postData.text}</Text>\r\n                <Text>Likes: {this.state.postData.numLikes}</Text>\r\n                <Text>\r\n                  {new Date(this.state.postData.timestamp).toUTCString()}\r\n                </Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default ViewPost;\r\n\r\nconst styles = StyleSheet.create({\r\n  Container: {\r\n    position: 'relative',\r\n    margin: '3%',\r\n    flex: '1',\r\n  },\r\n\r\n  TextInput: {\r\n    fontSize: '14px',\r\n    height: '10%',\r\n    borderWidth: '2px',\r\n    borderColor: '#000000',\r\n  },\r\n\r\n  postView: {\r\n    backgroundColor: '#d3d3d3',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}