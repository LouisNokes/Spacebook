{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SettingScreen = function (_Component) {\n  _inherits(SettingScreen, _Component);\n\n  var _super = _createSuper(SettingScreen);\n\n  function SettingScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SettingScreen);\n\n    _this = _super.call(this, props);\n\n    _this.checkLoggedIn = function _callee() {\n      var navigation, token;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 3:\n              token = _context.sent;\n\n              if (token == null) {\n                navigation.navigate('login');\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.logout = function _callee2() {\n      var navigation, token;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 3:\n              token = _context2.sent;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem('@session_token'));\n\n            case 6:\n              return _context2.abrupt(\"return\", fetch('http://localhost:3333/api/1.0.0/logout', {\n                method: 'post',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  navigation.navigate('login');\n                } else if (response.status === 401) {\n                  navigation.navigate('login');\n                } else {\n                  throw 'Something went wrong';\n                }\n              }).catch(function (error) {\n                console.log(error);\n                ToastAndroid.show(error, ToastAndroid.SHORT);\n              }));\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.updateUser = function _callee3() {\n      var navigation, _this$state, email, password, firstName, lastName, token, userId;\n\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _this$state = _this.state, email = _this$state.email, password = _this$state.password, firstName = _this$state.firstName, lastName = _this$state.lastName;\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 4:\n              token = _context3.sent;\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@user_id'));\n\n            case 7:\n              userId = _context3.sent;\n              return _context3.abrupt(\"return\", fetch(\"http://localhost:3333/api/1.0.0/user/\" + userId, {\n                method: 'PATCH',\n                headers: {\n                  'X-Authorization': token,\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  email: email,\n                  password: password,\n                  first_name: firstName,\n                  last_name: lastName\n                })\n              }).then(function (response) {\n                if (response.status === 200) {\n                  navigation.navigate('Login');\n                }\n\n                if (response.status === 400) {\n                  throw new Error('Bad Request');\n                } else if (response.status === 401) {\n                  throw new Error('Unauthorised');\n                } else {\n                  throw 'Something went wrong';\n                }\n              }));\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      token: '',\n      password: '',\n      email: '',\n      listData: [],\n      firstName: '',\n      lastName: ''\n    };\n    return _this;\n  }\n\n  _createClass(SettingScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.checkLoggedIn();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          firstName = _this$state2.firstName,\n          lastName = _this$state2.lastName;\n      return _jsxs(View, {\n        style: styles.centeredView,\n        children: [_jsx(TextInput, {\n          placeholder: \"First name\",\n          onChangeText: function onChangeText(firstName) {\n            return _this2.setState({\n              firstName: firstName\n            });\n          },\n          value: firstName,\n          style: styles.input\n        }), _jsx(TextInput, {\n          placeholder: \"Last name\",\n          onChangeText: function onChangeText(lastName) {\n            return _this2.setState({\n              lastName: lastName\n            });\n          },\n          value: lastName,\n          style: styles.input\n        }), _jsx(TextInput, {\n          placeholder: \"New email\",\n          onChangeText: function onChangeText(email) {\n            return _this2.setState({\n              email: email\n            });\n          },\n          value: email,\n          style: styles.input\n        }), _jsx(TextInput, {\n          placeholder: \"New password\",\n          onChangeText: function onChangeText(password) {\n            return _this2.setState({\n              password: password\n            });\n          },\n          secureTextEntry: true,\n          value: password,\n          style: styles.input\n        }), _jsx(TouchableOpacity, {\n          style: styles.settingPageBtn,\n          onPress: function onPress() {\n            _this2.updateUser();\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'white'\n            },\n            children: \"Update\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.settingPageBtn,\n          onPress: function onPress() {\n            _this2.logout();\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'red'\n            },\n            children: \"Sign out\"\n          })\n        })]\n      });\n    }\n  }]);\n\n  return SettingScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22,\n    backgroundColor: '#3b5998'\n  },\n  settingPageBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#8b9dc3',\n    padding: 10,\n    margin: 5,\n    borderRadius: 10,\n    borderWidth: 2\n  },\n  input: {\n    height: 40,\n    margin: 5,\n    borderWidth: 1,\n    padding: 10,\n    backgroundColor: '#FFFFFF'\n  }\n});\nexport default SettingScreen;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/settingScreen.js"],"names":["React","Component","AsyncStorage","SettingScreen","props","checkLoggedIn","navigation","getItem","token","navigate","logout","removeItem","fetch","method","headers","then","response","status","catch","error","console","log","ToastAndroid","show","SHORT","updateUser","state","email","password","firstName","lastName","userId","body","JSON","stringify","first_name","last_name","Error","listData","styles","centeredView","setState","input","settingPageBtn","color","StyleSheet","create","flex","justifyContent","alignItems","marginTop","backgroundColor","padding","margin","borderRadius","borderWidth","height"],"mappings":"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","sourcesContent":["/* eslint-disable no-throw-literal */\n/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  TouchableOpacity,\n  TextInput,\n  ToastAndroid,\n} from 'react-native';\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nclass SettingScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      token: '',\n      password: '',\n      email: '',\n      listData: [],\n      firstName: '',\n      lastName: '',\n    };\n  }\n\n  componentDidMount() {\n    this.checkLoggedIn();\n  }\n\n  checkLoggedIn = async () => {\n    const { navigation } = this.props;\n    const token = await AsyncStorage.getItem('@session_token');\n    if (token == null) {\n      navigation.navigate('login');\n    }\n  };\n\n  logout = async () => {\n    const { navigation } = this.props;\n    const token = await AsyncStorage.getItem('@session_token');\n    await AsyncStorage.removeItem('@session_token');\n    return fetch('http://localhost:3333/api/1.0.0/logout', {\n      method: 'post',\n      headers: {\n        'X-Authorization': token,\n      },\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          navigation.navigate('login');\n        } else if (response.status === 401) {\n          navigation.navigate('login');\n        } else {\n          throw 'Something went wrong';\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        ToastAndroid.show(error, ToastAndroid.SHORT);\n      });\n  };\n\n  updateUser = async () => {\n    const { navigation } = this.props;\n    const { email, password, firstName, lastName } = this.state;\n    const token = await AsyncStorage.getItem('@session_token');\n    const userId = await AsyncStorage.getItem('@user_id');\n    return fetch(`http://localhost:3333/api/1.0.0/user/${userId}`, {\n      method: 'PATCH',\n      headers: {\n        'X-Authorization': token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n        first_name: firstName,\n        last_name: lastName,\n      }),\n    }).then((response) => {\n      if (response.status === 200) {\n        navigation.navigate('Login');\n      }\n      if (response.status === 400) {\n        throw new Error('Bad Request');\n      } else if (response.status === 401) {\n        throw new Error('Unauthorised');\n      } else {\n        throw 'Something went wrong';\n      }\n    });\n  };\n\n  render() {\n    const { email, password, firstName, lastName } = this.state;\n    return (\n      <View style={styles.centeredView}>\n        <TextInput\n          placeholder=\"First name\"\n          onChangeText={(firstName) => this.setState({ firstName })}\n          value={firstName}\n          style={styles.input}\n        />\n        <TextInput\n          placeholder=\"Last name\"\n          onChangeText={(lastName) => this.setState({ lastName })}\n          value={lastName}\n          style={styles.input}\n        />\n        <TextInput\n          placeholder=\"New email\"\n          onChangeText={(email) => this.setState({ email })}\n          value={email}\n          style={styles.input}\n        />\n        <TextInput\n          placeholder=\"New password\"\n          onChangeText={(password) => this.setState({ password })}\n          secureTextEntry\n          value={password}\n          style={styles.input}\n        />\n        <TouchableOpacity\n          style={styles.settingPageBtn}\n          onPress={() => {\n            this.updateUser();\n          }}\n        >\n          <Text style={{ color: 'white' }}>Update</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={styles.settingPageBtn}\n          onPress={() => {\n            this.logout();\n          }}\n        >\n          <Text style={{ color: 'red' }}>Sign out</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22,\n    backgroundColor: '#3b5998',\n  },\n  settingPageBtn: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#8b9dc3',\n    padding: 10,\n    margin: 5,\n    borderRadius: 10,\n    borderWidth: 2,\n  },\n  input: {\n    height: 40,\n    margin: 5,\n    borderWidth: 1,\n    padding: 10,\n    backgroundColor: '#FFFFFF',\n  },\n});\n\nexport default SettingScreen;\n"]},"metadata":{},"sourceType":"module"}