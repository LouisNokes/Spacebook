{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EditPost = function (_Component) {\n  _inherits(EditPost, _Component);\n\n  var _super = _createSuper(EditPost);\n\n  function EditPost(props) {\n    var _this;\n\n    _classCallCheck(this, EditPost);\n\n    _this = _super.call(this, props);\n\n    _this.getPost = function _callee() {\n      var postId, navigation, token, userId;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              postId = _this.state.postId;\n              navigation = _this.props.navigation;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 4:\n              token = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@user_id'));\n\n            case 7:\n              userId = _context.sent;\n              return _context.abrupt(\"return\", fetch(\"http://localhost:3333/api/1.0.0/user/\" + userId + \"/post/\" + postId, {\n                method: 'GET',\n                headers: {\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  return response.json();\n                }\n\n                if (response.status === 401) {\n                  navigation.navigate('login');\n                } else if (response.status === 403) {\n                  throw new Error('Can only view the post of yourself of your friends');\n                }\n\n                throw 'Something went wrong';\n              }).then(function (responseJson) {\n                _this.setState({\n                  isLoading: false,\n                  text: responseJson.text,\n                  firstName: responseJson.author.first_name,\n                  lastName: responseJson.author.last_name\n                });\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.updateText = function _callee2() {\n      var navigation, _this$state, newText, postId, token, userId;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _this$state = _this.state, newText = _this$state.newText, postId = _this$state.postId;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 4:\n              token = _context2.sent;\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@user_id'));\n\n            case 7:\n              userId = _context2.sent;\n              return _context2.abrupt(\"return\", fetch(\"http://localhost:3333/api/1.0.0/user/\" + userId + \"/post/\" + postId, {\n                method: 'PATCH',\n                headers: {\n                  'X-Authorization': token,\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  text: newText\n                })\n              }).then(function (response) {\n                if (response.status === 200) {\n                  _this.getPost();\n                }\n\n                if (response.status === 400) {\n                  throw new Error('Bad Request');\n                } else if (response.status === 401) {\n                  throw new Error('Unauthorised');\n                } else {\n                  throw 'Something went wrong';\n                }\n              }));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      listData: '',\n      firstName: '',\n      lastName: '',\n      postId: _this.props.route.params.postID,\n      photo: null,\n      newText: ''\n    };\n    return _this;\n  }\n\n  _createClass(EditPost, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getPost();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          photo = _this$state2.photo,\n          firstName = _this$state2.firstName,\n          lastName = _this$state2.lastName,\n          text = _this$state2.text,\n          newText = _this$state2.newText;\n      return _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(ScrollView, {\n          style: styles.backgrd,\n          children: [_jsxs(View, {\n            style: styles.postContainer,\n            children: [_jsx(Image, {\n              style: styles.profileImgCont,\n              source: photo\n            }), _jsxs(Text, {\n              style: styles.nameTxt,\n              children: [firstName, \" \", lastName]\n            }), _jsxs(Text, {\n              style: styles.contentSection,\n              children: [\" \", text, \" \"]\n            })]\n          }), _jsx(TextInput, {\n            placeholder: \"Edit post...\",\n            onChangeText: function onChangeText(newText) {\n              return _this2.setState({\n                newText: newText\n              });\n            },\n            value: newText,\n            style: styles.input\n          }), _jsx(TouchableOpacity, {\n            style: styles.editbtn,\n            onPress: function onPress() {\n              _this2.updateText();\n            },\n            children: _jsx(Text, {\n              style: {\n                color: 'white'\n              },\n              children: \"Update\"\n            })\n          })]\n        })\n      });\n    }\n  }]);\n\n  return EditPost;\n}(Component);\n\nvar styles = StyleSheet.create({\n  profileImg: {\n    width: 100,\n    height: 100,\n    borderRadius: 80,\n    borderColor: 'black',\n    borderWidth: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 20\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#3b5998'\n  },\n  input: {\n    height: 40,\n    margin: 5,\n    borderWidth: 1,\n    padding: 10,\n    backgroundColor: '#FFFFFF'\n  },\n  txt: {\n    fontWeight: 'bold',\n    color: 'black',\n    margin: 2\n  },\n  txtName: {\n    fontWeight: 'bold',\n    color: 'black',\n    fontSize: 20\n  },\n  editbtn: {\n    alignItems: 'center',\n    backgroundColor: '#8b9dc3',\n    borderRadius: 10,\n    padding: 10,\n    margin: 5,\n    borderWidth: 2\n  },\n  backgrd: {\n    backgroundColor: '#3b5998'\n  },\n  buttonContainer: {\n    flexDirection: 'row'\n  },\n  postContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'white',\n    borderRadius: 10,\n    height: 300,\n    width: 400,\n    marginTop: 30,\n    borderWidth: 2\n  },\n  rightButtons: {\n    flexDirection: 'row',\n    marginLeft: 300\n  },\n  profileImgCont: {\n    resizeMode: 'contain',\n    alignSelf: 'center',\n    height: 30,\n    width: 30\n  },\n  position: {\n    bottom: 200\n  },\n  nameTxt: {\n    fontWeight: 'bold',\n    textAlign: 'center',\n    textDecorationLine: 'underline'\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    margin: 5,\n    width: 170\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  contentSection: {\n    marginTop: 10,\n    marginBottom: 15\n  }\n});\nexport default EditPost;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/editPost.js"],"names":["AsyncStorage","React","Component","EditPost","props","getPost","postId","state","navigation","getItem","token","userId","fetch","method","headers","then","response","status","json","navigate","Error","responseJson","setState","isLoading","text","firstName","author","first_name","lastName","last_name","catch","error","console","log","updateText","newText","body","JSON","stringify","listData","route","params","postID","photo","styles","centeredView","backgrd","postContainer","profileImgCont","nameTxt","contentSection","input","editbtn","color","StyleSheet","create","profileImg","width","height","borderRadius","borderColor","borderWidth","justifyContent","alignItems","margin","flex","backgroundColor","padding","txt","fontWeight","txtName","fontSize","buttonContainer","flexDirection","marginTop","rightButtons","marginLeft","resizeMode","alignSelf","position","bottom","textAlign","textDecorationLine","button","elevation","textStyle","marginBottom"],"mappings":"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","sourcesContent":["/* eslint-disable react/sort-comp */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable react/no-unused-class-component-methods */\r\n/* eslint-disable react/no-unused-state */\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport React, { Component } from 'react';\r\nimport {\r\n  Text,\r\n  View,\r\n  Image,\r\n  StyleSheet,\r\n  TextInput,\r\n  TouchableOpacity,\r\n} from 'react-native';\r\nimport { ScrollView } from 'react-native-web';\r\n\r\nclass EditPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      listData: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      postId: this.props.route.params.postID,\r\n      photo: null,\r\n      newText: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getPost();\r\n  }\r\n\r\n  getPost = async () => {\r\n    const { postId } = this.state;\r\n    const { navigation } = this.props;\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n    const userId = await AsyncStorage.getItem('@user_id');\r\n    return fetch(\r\n      `http://localhost:3333/api/1.0.0/user/${userId}/post/${postId}`,\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'X-Authorization': token,\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          return response.json();\r\n        }\r\n        if (response.status === 401) {\r\n          navigation.navigate('login');\r\n        } else if (response.status === 403) {\r\n          throw new Error('Can only view the post of yourself of your friends');\r\n        }\r\n        throw 'Something went wrong';\r\n      })\r\n      .then((responseJson) => {\r\n        this.setState({\r\n          isLoading: false,\r\n          text: responseJson.text,\r\n          firstName: responseJson.author.first_name,\r\n          lastName: responseJson.author.last_name,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  updateText = async () => {\r\n    const { navigation } = this.props;\r\n    const { newText, postId } = this.state;\r\n    const token = await AsyncStorage.getItem('@session_token');\r\n    const userId = await AsyncStorage.getItem('@user_id');\r\n    return fetch(\r\n      `http://localhost:3333/api/1.0.0/user/${userId}/post/${postId}`,\r\n      {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'X-Authorization': token,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          text: newText,\r\n        }),\r\n      }\r\n    ).then((response) => {\r\n      if (response.status === 200) {\r\n        this.getPost();\r\n      }\r\n      if (response.status === 400) {\r\n        throw new Error('Bad Request');\r\n      } else if (response.status === 401) {\r\n        throw new Error('Unauthorised');\r\n      } else {\r\n        throw 'Something went wrong';\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { photo, firstName, lastName, text, newText } = this.state;\r\n    return (\r\n      <View style={styles.centeredView}>\r\n        <ScrollView style={styles.backgrd}>\r\n          <View style={styles.postContainer}>\r\n            <Image style={styles.profileImgCont} source={photo} />\r\n            <Text style={styles.nameTxt}>\r\n              {firstName} {lastName}\r\n            </Text>\r\n            <Text style={styles.contentSection}> {text} </Text>\r\n          </View>\r\n          <TextInput\r\n            placeholder=\"Edit post...\"\r\n            onChangeText={(newText) => this.setState({ newText })}\r\n            value={newText}\r\n            style={styles.input}\r\n          />\r\n          <TouchableOpacity\r\n            style={styles.editbtn}\r\n            onPress={() => {\r\n              this.updateText();\r\n            }}\r\n          >\r\n            <Text style={{ color: 'white' }}>Update</Text>\r\n          </TouchableOpacity>\r\n        </ScrollView>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  profileImg: {\r\n    width: 100,\r\n    height: 100,\r\n    borderRadius: 80,\r\n    borderColor: 'black',\r\n    borderWidth: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    margin: 20,\r\n  },\r\n  centeredView: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#3b5998',\r\n  },\r\n  input: {\r\n    height: 40,\r\n    margin: 5,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n    backgroundColor: '#FFFFFF',\r\n  },\r\n  txt: {\r\n    fontWeight: 'bold',\r\n    color: 'black',\r\n    margin: 2,\r\n  },\r\n  txtName: {\r\n    fontWeight: 'bold',\r\n    color: 'black',\r\n    fontSize: 20,\r\n  },\r\n  editbtn: {\r\n    alignItems: 'center',\r\n    backgroundColor: '#8b9dc3',\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    margin: 5,\r\n    borderWidth: 2,\r\n  },\r\n  backgrd: {\r\n    backgroundColor: '#3b5998',\r\n  },\r\n  buttonContainer: {\r\n    flexDirection: 'row',\r\n  },\r\n  postContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    height: 300,\r\n    width: 400,\r\n    marginTop: 30,\r\n    borderWidth: 2,\r\n  },\r\n  rightButtons: {\r\n    flexDirection: 'row',\r\n    marginLeft: 300,\r\n  },\r\n  profileImgCont: {\r\n    resizeMode: 'contain',\r\n    alignSelf: 'center',\r\n    height: 30,\r\n    width: 30,\r\n  },\r\n  position: {\r\n    bottom: 200,\r\n  },\r\n  nameTxt: {\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    textDecorationLine: 'underline',\r\n  },\r\n  button: {\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    elevation: 2,\r\n    margin: 5,\r\n    width: 170,\r\n  },\r\n  textStyle: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  contentSection: {\r\n    marginTop: 10,\r\n    marginBottom: 15,\r\n  },\r\n});\r\n\r\nexport default EditPost;\r\n"]},"metadata":{},"sourceType":"module"}