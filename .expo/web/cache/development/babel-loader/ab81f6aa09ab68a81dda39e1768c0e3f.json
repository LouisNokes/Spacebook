{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SettingScreen = function (_Component) {\n  _inherits(SettingScreen, _Component);\n\n  var _super = _createSuper(SettingScreen);\n\n  function SettingScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SettingScreen);\n\n    _this = _super.call(this, props);\n\n    _this.logout = function _callee() {\n      var token;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n            case 2:\n              token = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem('@session_token'));\n\n            case 5:\n              return _context.abrupt(\"return\", fetch(\"http://10.0.2.2:3333/api/1.0.0/logout\", {\n                method: 'post',\n                headers: {\n                  \"X-Authorization\": token\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  _this.props.navigation.navigate(\"login\");\n                } else if (response.status === 401) {\n                  _this.props.navigation.navigate(\"login\");\n                } else {\n                  throw 'Something went wrong';\n                }\n              }).catch(function (error) {\n                console.log(error);\n                ToastAndroid.show(error, ToastAndroid.SHORT);\n              }));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      token: '',\n      password: '',\n      email: ''\n    };\n    return _this;\n  }\n\n  _createClass(SettingScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsxs(ScrollView, {\n        children: [_jsx(TouchableOpacity, {\n          style: styles.otherBtns,\n          onPress: function onPress() {},\n          children: _jsx(Text, {\n            style: {\n              color: 'white'\n            },\n            children: \"Change email/password\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.logoutBtn,\n          onPress: function onPress() {\n            _this2.logout();\n          },\n          children: _jsx(Text, {\n            style: {\n              color: 'red'\n            },\n            children: \"Log out\"\n          })\n        })]\n      });\n    }\n  }]);\n\n  return SettingScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  logoutBtn: {\n    alignItems: \"center\",\n    backgroundColor: \"grey\",\n    padding: 10,\n    margin: 5,\n    borderWidth: 2\n  },\n  otherBtns: {\n    alignItems: \"center\",\n    backgroundColor: \"grey\",\n    padding: 10,\n    margin: 5,\n    borderWidth: 2\n  }\n});\nexport default SettingScreen;","map":{"version":3,"sources":["C:/Users/louis/Desktop/Spacebook/screens/SettingScreen.js"],"names":["React","Component","AsyncStorage","SettingScreen","props","logout","getItem","token","removeItem","fetch","method","headers","then","response","status","navigation","navigate","catch","error","console","log","ToastAndroid","show","SHORT","state","password","email","styles","otherBtns","color","logoutBtn","StyleSheet","create","alignItems","backgroundColor","padding","margin","borderWidth"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;;;;IAEMC,a;;;;;AAEF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAanBC,MAbmB,GAaV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACaH,YAAY,CAACI,OAAb,CAAqB,gBAArB,CADb;;AAAA;AACDC,cAAAA,KADC;AAAA;AAAA,+CAECL,YAAY,CAACM,UAAb,CAAwB,gBAAxB,CAFD;;AAAA;AAAA,+CAGEC,KAAK,CAAC,uCAAD,EAA0C;AAClDC,gBAAAA,MAAM,EAAE,MAD0C;AAElDC,gBAAAA,OAAO,EAAE;AACL,qCAAmBJ;AADd;AAFyC,eAA1C,CAAL,CAMFK,IANE,CAMG,UAACC,QAAD,EAAc;AAChB,oBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,wBAAKV,KAAL,CAAWW,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B;AACH,iBAFD,MAEO,IAAIH,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAChC,wBAAKV,KAAL,CAAWW,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B;AACH,iBAFM,MAEA;AACH,wBAAM,sBAAN;AACH;AACJ,eAdE,EAeFC,KAfE,CAeI,UAACC,KAAD,EAAW;AACdC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,gBAAAA,YAAY,CAACC,IAAb,CAAkBJ,KAAlB,EAAyBG,YAAY,CAACE,KAAtC;AACH,eAlBE,CAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAbU;;AAGf,UAAKC,KAAL,GAAa;AACTjB,MAAAA,KAAK,EAAE,EADE;AAGTkB,MAAAA,QAAQ,EAAE,EAHD;AAITC,MAAAA,KAAK,EAAE;AAJE,KAAb;AAHe;AASlB;;;;WA4BD,kBAAS;AAAA;;AACL,aACI,MAAC,UAAD;AAAA,mBACI,KAAC,gBAAD;AACI,UAAA,KAAK,EAAEC,MAAM,CAACC,SADlB;AAEI,UAAA,OAAO,EAAE,mBAAM,CAAG,CAFtB;AAAA,oBAII,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAAb;AAAA;AAAA;AAJJ,UADJ,EAOI,KAAC,gBAAD;AACI,UAAA,KAAK,EAAEF,MAAM,CAACG,SADlB;AAEI,UAAA,OAAO,EAAE,mBAAM;AAAE,YAAA,MAAI,CAACzB,MAAL;AAAe,WAFpC;AAAA,oBAII,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEwB,cAAAA,KAAK,EAAE;AAAT,aAAb;AAAA;AAAA;AAJJ,UAPJ;AAAA,QADJ;AAgBH;;;;EAxDuB5B,S;;AA0D5B,IAAM0B,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC7BF,EAAAA,SAAS,EAAE;AACPG,IAAAA,UAAU,EAAE,QADL;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,OAAO,EAAE,EAHF;AAIPC,IAAAA,MAAM,EAAE,CAJD;AAKPC,IAAAA,WAAW,EAAE;AALN,GADkB;AAQ7BT,EAAAA,SAAS,EAAE;AACPK,IAAAA,UAAU,EAAE,QADL;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,OAAO,EAAE,EAHF;AAIPC,IAAAA,MAAM,EAAE,CAJD;AAKPC,IAAAA,WAAW,EAAE;AALN;AARkB,CAAlB,CAAf;AAiBA,eAAelC,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Text, StyleSheet, TouchableOpacity, ScrollView, ToastAndroid } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nclass SettingScreen extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            token: '',\n            // Change pass & email in settings\n            password: '',\n            email: ''\n        }\n    }\n\n\n\n    logout = async () => {\n        let token = await AsyncStorage.getItem('@session_token');\n        await AsyncStorage.removeItem('@session_token');\n        return fetch(\"http://10.0.2.2:3333/api/1.0.0/logout\", {\n            method: 'post',\n            headers: {\n                \"X-Authorization\": token\n            }\n        })\n            .then((response) => {\n                if (response.status === 200) {\n                    this.props.navigation.navigate(\"login\");\n                } else if (response.status === 401) {\n                    this.props.navigation.navigate(\"login\");\n                } else {\n                    throw 'Something went wrong';\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n                ToastAndroid.show(error, ToastAndroid.SHORT);\n            })\n    }\n\n    render() {\n        return (\n            <ScrollView>\n                <TouchableOpacity\n                    style={styles.otherBtns}\n                    onPress={() => { }}\n                >\n                    <Text style={{ color: 'white' }}>Change email/password</Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                    style={styles.logoutBtn}\n                    onPress={() => { this.logout() }}\n                >\n                    <Text style={{ color: 'red' }}>Log out</Text>\n                </TouchableOpacity>\n            </ScrollView>\n        )\n    }\n}\nconst styles = StyleSheet.create({\n    logoutBtn: {\n        alignItems: \"center\",\n        backgroundColor: \"grey\",\n        padding: 10,\n        margin: 5,\n        borderWidth: 2\n    },\n    otherBtns: {\n        alignItems: \"center\",\n        backgroundColor: \"grey\",\n        padding: 10,\n        margin: 5,\n        borderWidth: 2\n    }\n});\n\nexport default SettingScreen;"]},"metadata":{},"sourceType":"module"}